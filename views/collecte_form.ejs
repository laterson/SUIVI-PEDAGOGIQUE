<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Collecte des indicateurs ‚Äì <%= ((user && user.inspection)||'Inspection').toUpperCase() %></title>
  <style>
    :root{--bg:#f7f7f7;--b:#cfd4da;--th:#eef1f4;--ink:#1f2937;--muted:#6b7280;--brand:#2563eb;--brand-2:#1e40af}
    *{box-sizing:border-box}
    body{font-family:Arial,Helvetica,sans-serif;background:var(--bg);margin:0;color:var(--ink)}
    a{color:var(--ink);text-decoration:none}
    .wrap{padding:18px}
    h1{margin:0 0 10px;display:flex;align-items:center;gap:10px}
    .badge{display:inline-block;background:#111;color:#fff;border-radius:999px;padding:2px 8px;font-size:12px;line-height:18px}
    .topbar{display:flex;justify-content:space-between;align-items:center;margin-bottom:14px}
    .top-actions{display:flex;gap:8px;flex-wrap:wrap}
    .btn{border:1px solid #d1d5db;background:#fff;border-radius:8px;padding:7px 10px;font-size:13px;cursor:pointer}
    .btn:hover{background:#f7f7f7}
    .btn.primary{background:var(--brand);border-color:var(--brand);color:#fff}
    .btn.ghost{background:#f0f4ff;border-color:#dbe4ff}
    label,select{display:block;margin:8px 0 0}
    select{padding:4px 8px;border-radius:8px;border:1px solid var(--b);background:#fff}
    .layout{display:grid;grid-template-columns:1fr 360px;gap:16px}
    .bloc{background:#fff;border:1px solid var(--b);border-radius:10px;padding:10px 10px 6px;box-shadow:0 2px 6px rgba(0,0,0,.04);margin-bottom:16px}
    .bloc header{display:flex;align-items:center;justify-content:space-between}
    .bloc header .actions{display:flex;gap:8px;flex-wrap:wrap}
    table{width:100%;border-collapse:collapse;font-size:12px;margin-top:8px}
    th,td{border:1px solid var(--b);padding:4px 6px;text-align:center;vertical-align:middle}
    th{background:var(--th)}
    td[contenteditable]{background:#fffbe6;text-align:left}
    input[type=number]{width:72px}
    .totalRow td{background:#f6f6f6;font-weight:600}
    .note{opacity:.75}
    .hidden{display:none}
    .fixed{background:#eef6ff !important}
    .card{background:#fff;border:1px solid var(--b);border-radius:10px;padding:12px;margin-bottom:16px}
    .card h3{margin:0 0 8px;font-size:15px}
    .stat{font-weight:700}
    .drop{border:2px dashed #cbd5e1;border-radius:10px;padding:14px;text-align:center;background:#fafbfc}
    .drop.drag{background:#eef6ff;border-color:#93c5fd}
    .muted{color:var(--muted);font-size:12px}
    
    
   
    
    
    /* ===== Modale ===== */
    .modal{position:fixed;inset:0;background:rgba(0,0,0,.4);display:none;align-items:center;justify-content:center;padding:16px;z-index:50}
    .modal.open{display:flex}
    .dialog{width:min(1160px,98vw);max-height:94vh;background:#fff;border:1px solid var(--b);border-radius:12px;display:flex;flex-direction:column;overflow:hidden}
    .dialog header{position:sticky;top:0;background:#fff;border-bottom:1px solid var(--b);padding:10px 12px;z-index:1;display:flex;justify-content:space-between;align-items:center;gap:8px}
    .dialog .content{padding:0;overflow:auto;flex:1}
    .dialog footer{position:sticky;bottom:0;background:#fff;border-top:1px solid var(--b);padding:10px 12px;display:flex;justify-content:space-between;align-items:center;gap:8px}
    .cols-modal{display:grid;grid-template-columns:1.05fr 1fr;gap:0}
    .pane{padding:12px}
    .pane + .pane{border-left:1px solid var(--b)}
    .subtle{font-size:12px;color:var(--muted)}
    .bwrap{border:1px solid var(--b);border-radius:8px;padding:6px;background:#fff}
    .bwrap.x{overflow-x:auto}
    .hstack{display:flex;gap:8px;flex-wrap:wrap;align-items:end;margin:6px 0}
    .classList{display:flex;flex-direction:column;gap:4px;max-height:45vh;overflow:auto}
    .classItem{padding:6px 8px;border:1px solid #e5e7eb;border-radius:8px;cursor:pointer;background:#fafafa}
    .classItem.active{border-color:var(--brand);background:#eef4ff}
    .toolbar{display:flex;gap:6px;flex-wrap:wrap;margin:6px 0}
    .chip{display:inline-block;border:1px solid var(--b);border-radius:999px;padding:2px 8px;margin-right:6px;background:#f7f7fb}
    /* Lisibilit√© tableau baselines */
    #bTable{table-layout:fixed;min-width:980px}
    #bTable th:first-child,#bTable td:first-child{width:320px;text-align:left}
    #bTable thead th{position:sticky;top:0;z-index:1}
    #bTable td input[type=number]{text-align:right}
    #bTable td:last-child, #bTable th:last-child{width:56px}
    #bTable td input[type=text]{white-space:normal}
    /* ======== AM√âLIORATIONS ‚Äî Effectifs & Personnel ======== */
    .bwrap.eff {max-height:36vh; min-height:220px; overflow:auto}
    .bwrap.staff{max-height:26vh; min-height:180px; overflow:auto}
    .tbl-mini{font-size:13px;border-collapse:collapse;width:100%;table-layout:fixed}
    .tbl-mini thead th{position:sticky;top:0;background:#f8fafc;z-index:1}
    .tbl-mini th,.tbl-mini td{padding:6px 8px;border-bottom:1px solid #e5e7eb}
    .tbl-mini tbody tr:nth-child(odd){background:#fafafa}
    .tbl-mini input[type=text], .tbl-mini input[type=number], .tbl-mini textarea{ width:100%;height:32px;line-height:32px; padding:6px 8px;border:1px solid var(--b);border-radius:6px;box-sizing:border-box; font-size:13px;background:#fff; }
    .tbl-mini textarea{height:36px;resize:vertical}
    .tbl-mini input[type=number]{text-align:right}
    .tbl-mini input[type=number]::-webkit-outer-spin-button, .tbl-mini input[type=number]::-webkit-inner-spin-button{ -webkit-appearance:none; margin:0 }
    .tbl-mini input[type=number]{ -moz-appearance:textfield }
  /* largeurs verrouill√©es ‚Äî Effectifs (avec divisions) */
#effTable col:nth-child(1){width:280px}      /* Classe (base) */
#effTable col:nth-child(2){width:72px}       /* Div. */
#effTable col:nth-child(3){width:100px}      /* F */
#effTable col:nth-child(4){width:100px}      /* G */
#effTable col:nth-child(5){width:72px}       /* actions */
#effTable th:first-child,#effTable td:first-child{text-align:left}

    /* largeurs verrouill√©es ‚Äî Personnel */
    #staffTable col:nth-child(1){width:180px}
    #staffTable col:nth-child(2){width:120px}
    #staffTable col:nth-child(3){width:180px}
    #staffTable col:nth-child(4){width:120px}
    #staffTable col:nth-child(5){width:auto}
    #staffTable col:nth-child(6){width:92px} /* √©largi pour bouton üìÑ */
    #staffTable th:first-child,#staffTable td:first-child{text-align:left}
    /* ===== Hero AP ===== */
    .hero{display:flex;align-items:center;gap:10px;padding:10px;border:1px solid var(--b);border-radius:10px;background:linear-gradient(180deg,#f7fbff,#ffffff)}
    .hero .avatar{width:38px;height:38px;border-radius:50%;background:#e0ecff;display:flex;align-items:center;justify-content:center;font-weight:700;color:var(--brand-2)}
    .hero .name{font-weight:800}
    .hero .etab{font-size:12px;color:var(--brand-2)}
    .hero .insp{font-size:12px;color:#111}
    /* ===== Modale Explorateur Personnel ===== */
    .grid-staff{width:100%;border-collapse:collapse;font-size:13px}
    .grid-staff th,.grid-staff td{border-bottom:1px solid #e5e7eb;padding:8px;text-align:left;vertical-align:top}
    .grid-staff thead th{position:sticky;top:0;background:#f8fafc;z-index:1}
    .pill{display:inline-block;padding:2px 8px;border:1px solid #e5e7eb;border-radius:999px;margin:2px;background:#f9fafb;font-size:12px}
    .kbd{display:inline-block;border:1px solid #ddd;border-bottom-width:2px;padding:0 6px;border-radius:6px;background:#fff;font-size:12px}
    /* ======== File manager am√©lior√© ======== */
/* ===== WhatsApp-like chat ===== */
.wchat { display:flex; flex-direction:column; gap:0; padding:0; overflow:hidden }
.wchat .w-header{display:flex;align-items:center;gap:10px;padding:10px;border:1px solid var(--b);border-radius:10px;background:#075e54;color:#fff}
.wchat .w-name{font-weight:700}
.wchat .w-sub{font-size:12px;opacity:.9}
.wchat .w-avatar{width:34px;height:34px;border-radius:50%;background:#25d366;display:flex;align-items:center;justify-content:center;font-weight:800}
.wchat .w-msgs{border:1px solid var(--b);border-radius:10px;margin-top:8px;height:260px;overflow:auto;padding:10px;
  background:#e5ddd5;
  background-image:
    radial-gradient(rgba(0,0,0,.035) 0.5px, transparent 0.5px),
    radial-gradient(rgba(0,0,0,.035) 0.5px, transparent 0.5px);
  background-position: 0 0, 12px 12px; background-size: 24px 24px;
}
.w-day{display:inline-block;margin:10px auto 4px;padding:3px 10px;border-radius:999px;background:rgba(0,0,0,.08);font-size:11px}
.w-msg{display:flex;gap:6px;margin:8px 0;align-items:flex-end}
.w-avatar-sm{width:24px;height:24px;border-radius:50%;background:#c8e6c9;display:flex;align-items:center;justify-content:center;font-size:11px;font-weight:800;color:#2e7d32}
.w-bubble{max-width:78%;padding:8px 10px;border-radius:14px;box-shadow:0 1px 1px rgba(0,0,0,.06)}
.w-msg.theirs .w-bubble{background:#fff;border-top-left-radius:4px}
.w-msg.mine{justify-content:flex-end}
.w-msg.mine .w-bubble{background:#dcf8c6;border-top-right-radius:4px}
.w-from{font-size:11px;color:#075e54;margin:0 0 2px 2px;font-weight:700}
.w-msg.mine .w-from{color:#0a6e56}
.w-text{white-space:pre-wrap;word-wrap:break-word}
.w-meta{font-size:10px;opacity:.7;text-align:right;margin-top:3px;display:flex;gap:6px;justify-content:flex-end}
.w-ticks{font-weight:700}

/* Quote (reply) */
.w-quote{border-left:3px solid #34b7f1;background:rgba(255,255,255,.7);padding:6px 8px;border-radius:8px;margin-bottom:6px;cursor:pointer}
.w-quote .q-name{font-size:11px;font-weight:700;margin-bottom:2px;color:#1f2937}
.w-quote .q-text{font-size:12px;color:#374151}

/* Barre ‚ÄúR√©pondre √† ‚Ä¶‚Äù au-dessus de l‚Äôinput */
.w-replybar{display:flex;align-items:center;gap:8px;border:1px solid var(--b);border-radius:8px;padding:6px 8px;background:#f1f5f9;margin-top:6px}
.w-replybar .name{font-weight:700}
.w-replybar .snippet{font-size:12px;color:#475569}
.w-replybar .close{margin-left:auto;border:none;background:#e11d48;color:#fff;border-radius:6px;padding:4px 8px;cursor:pointer}
.hidden{display:none}

.wchat .w-input{display:flex;gap:6px;align-items:center;margin-top:8px;border:1px solid var(--b);border-radius:999px;padding:6px 8px;background:#fff}
.w-input .icon{border:none;background:transparent;cursor:pointer;font-size:18px}
.w-input input[type=text]{flex:1;border:none;outline:0;font-size:14px}
.w-input .send{border:none;border-radius:50%;width:34px;height:34px;background:#128c7e;color:#fff;font-weight:800;cursor:pointer}

/* On masque l‚Äôancien composant s‚Äôil restait dans le DOM */
.chat{display:none}

/* Surlignage quand on ouvre un message cit√© */
.flash{animation:flash 1.8s ease 1}
@keyframes flash{0%{box-shadow:0 0 0 0 rgba(255,238,0,.9)}100%{box-shadow:0 0 0 0 transparent}}




    .filetoolbar{display:flex;gap:8px;align-items:center;flex-wrap:wrap;margin:8px 0}
    .filetoolbar .search{flex:1;min-width:120px}
    .filetoolbar input[type=text]{width:100%;border:1px solid var(--b);border-radius:8px;padding:7px 10px}
    .filterchips{display:flex;gap:6px;flex-wrap:wrap}
    .chip.btn{padding:3px 10px;border-radius:999px;cursor:pointer;background:#f8fafc;border-color:#e5e7eb}
    .chip.btn.active{background:#e7efff;border-color:#c7d7ff}
    .filegrid{display:grid;grid-template-columns:repeat(2,1fr);gap:8px;max-height:260px;overflow:auto;border-top:1px dashed #e5e7eb;padding-top:6px}
    @media (min-width:420px){ .filegrid{grid-template-columns:1fr 1fr} }
    @media (min-width:520px){ .filegrid{grid-template-columns:1fr 1fr} }
    @media (min-width:640px){ .filegrid{grid-template-columns:1fr 1fr} }
    .filecard{border:1px solid #e5e7eb;border-radius:10px;padding:8px;display:flex;gap:8px;align-items:flex-start;background:#fff}
    .fileicon{font-size:20px;line-height:1.1}
    .filemeta{flex:1;min-width:0}
    .filemeta .name{font-size:13px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
    .filemeta .sub{font-size:11px;color:var(--muted);margin-top:2px;display:flex;gap:8px;flex-wrap:wrap}
  </style>
</head>
<body>
<div class="wrap">
  <div class="topbar">
    <div>
      <h1>
        Collecte des indicateurs p√©dagogiques
        <span id="badgeClasses" class="badge hidden">0 classes</span>
      </h1>
      <div class="muted">
        Connect√© : <strong><%= (user && user.nom) || '‚Äî' %></strong> ‚Äî <em><%= (user && user.etab) || '‚Äî' %></em> ‚Äî
        <span>Inspection <strong><%= ((user && user.inspection)||'').toUpperCase() %></strong></span>
      </div>
      <div class="insp">D√©partement <strong id="deptLabel"><%= (user && user.departement) || '‚Äî' %></strong></div>

    </div>
    <div class="top-actions">
      <button class="btn" id="btnOpenSettings">‚öôÔ∏è Param√®tres √©tablissement</button>
      <button class="btn" id="btnOpenStaffExplorer">üë©‚Äçüè´ Personnel</button>
      <a class="btn" href="/collecte/mes">üóÇÔ∏è Mes collectes</a>
      <a class="btn" href="/fichiers">üìé Documents partag√©s</a>
      <form action="/auth/logout" method="post" style="display:inline"><button class="btn">‚Ü© D√©connexion</button></form>
    </div>
  </div>

  <div class="layout">
    <!-- ======== Colonne principale: Collecte ======== -->
    <div>
      <div class="bloc">
        <label for="cycle">Choisir le cycle :</label>
        <select id="cycle">
          <option value="">-- Choisir --</option>
          <option value="premier">Premier cycle</option>
          <option value="second">Second cycle</option>
        </select>

        <div id="specialiteContainer" class="hidden">
          <label for="specialite">Choisir la sp√©cialit√© :</label>
          <select id="specialite"><option value="">-- Choisir --</option></select>
        </div>

        <div id="evaluationContainer" class="hidden">
          <label for="evaluation">Choisir l'√©valuation :</label>
          <div style="display:flex;gap:8px;align-items:center;flex-wrap:wrap">
            <select id="evaluation">
              <option value="">-- Choisir l'√©valuation --</option>
              <option value="1">√âvaluation 1</option><option value="2">√âvaluation 2</option>
              <option value="3">√âvaluation 3</option><option value="4">√âvaluation 4</option>
              <option value="5">√âvaluation 5</option><option value="6">√âvaluation 6</option>
            </select>
            <button id="btnPrefill" class="btn" type="button" title="Pr√©remplir les colonnes ‚Äòfait‚Äô avec le cumul des √©valuations pr√©c√©dentes">‚Üü Pr√©remplir depuis √©vals pr√©c√©dentes</button>
          </div>
        </div>
      </div>

      <div id="formulaires"></div>

      <div class="bloc hidden" id="cycleTotalBloc">
        <header>
          <h2 id="cycleTotalTitre">Total/Moyenne du cycle</h2>
          <div class="actions">
            <button class="btn" onclick="printCollecte()">üñ® Imprimer la collecte</button>
            <button class="btn primary" id="btnSoumettre" onclick="soumettre()">üì§ Soumettre</button>
            <button class="btn" onclick="exportCSV()">‚¨áÔ∏è Export CSV</button>
            <label class="note" style="display:inline-flex;align-items:center;gap:6px;margin-left:6px">
              <input type="checkbox" id="chkSendCarte"> Inclure la ¬´ carte scolaire ¬ª pour l‚Äôinspecteur
            </label>
            <button class="btn ghost" id="btnSendCarteDirect" type="button" title="Envoyer la carte scolaire (sans enregistrer la collecte)" onclick="soumettreCarteScolaire()">üì° Envoyer la carte scolaire</button>
            <span class="note">Les pourcentages s‚Äôaffichent en ¬´ ‚Äî ¬ª quand le total est 0.</span>
          </div>
        </header>
        <table id="cycleTotalTable"></table>
      </div>
    </div>

    <!-- ======== Sidebar ======== -->
    <aside>
      <div class="card hero">
        <div class="avatar"><%= ((user && user.nom) || 'AP').split(' ').map(x=>x[0]).join('').slice(0,2).toUpperCase() %></div>
        <div>
          <div class="name"><%= (user && user.nom) || '‚Äî' %></div>
          <div class="etab"><%= (user && user.etab) || '‚Äî' %></div>
          <div class="insp">Inspection <strong><%= ((user && user.inspection)||'').toUpperCase() %></strong></div>
        </div>
      </div>

      <div class="card">
        <h3>R√©sum√©</h3>
        <div><span class="muted">Sp√©cialit√© :</span> <span id="sumSpec" class="stat">‚Äî</span></div>
        <div><span class="muted">√âvaluation :</span> <span id="sumEval" class="stat">‚Äî</span></div>
        <div><span class="muted">Classes :</span> <span id="sumClasses" class="stat">0</span></div>
      </div>

      <div class="card">
        <h3>√âtablissement (<span id="yearStat">‚Äî</span>)</h3>
        <div id="effStaffStat" class="muted">Aucun param√©trage trouv√©.</div>
        <details id="effStaffDetails" class="hidden" style="margin-top:6px">
          <summary>Voir le d√©tail des classes</summary>
          <div id="effTableWrap"></div>
        </details>
      </div>

      <!-- ===== Uploader + Gestionnaire de documents am√©lior√© ===== -->
      <div class="card" id="uploaderCard">
        <h3>Documents partag√©s</h3>
        <div id="drop" class="drop">Glissez-d√©posez vos fichiers ici ou <button id="pick" class="btn" type="button">Parcourir‚Ä¶</button></div>
        <input id="fileInput" type="file" multiple class="hidden" />
        <div class="filetoolbar">
          <div class="filterchips" id="fileFilters">
            <button class="chip btn active" data-ftype="all">Tous <span class="muted" id="cnt_all">(0)</span></button>
            <button class="chip btn" data-ftype="pdf">PDF <span class="muted" id="cnt_pdf">(0)</span></button>
            <button class="chip btn" data-ftype="image">Images <span class="muted" id="cnt_image">(0)</span></button>
            <button class="chip btn" data-ftype="sheet">Tableurs <span class="muted" id="cnt_sheet">(0)</span></button>
            <button class="chip btn" data-ftype="doc">Docs <span class="muted" id="cnt_doc">(0)</span></button>
            <button class="chip btn" data-ftype="slide">Pr√©sentations <span class="muted" id="cnt_slide">(0)</span></button>
            <button class="chip btn" data-ftype="archive">Archives <span class="muted" id="cnt_archive">(0)</span></button>
            <button class="chip btn" data-ftype="other">Autres <span class="muted" id="cnt_other">(0)</span></button>
          </div>
          <div class="search"><input id="fileSearch" type="text" placeholder="Rechercher un document‚Ä¶"></div>
          <select id="fileSort" title="Trier">
            <option value="date_desc">Trier : Date ‚Üì</option>
            <option value="date_asc">Trier : Date ‚Üë</option>
            <option value="name_asc">Trier : Nom A‚ÜíZ</option>
            <option value="name_desc">Trier : Nom Z‚ÜíA</option>
            <option value="size_desc">Trier : Taille ‚Üì</option>
            <option value="size_asc">Trier : Taille ‚Üë</option>
          </select>
        </div>
        <div id="files" class="filegrid"></div>
        <div class="muted" style="margin-top:6px">PDF, images, Excel, etc. (multi-fichiers)</div>
      </div>

      <div class="card" id="chatCard">
        <h3>Forum <%= ((user && user.inspection)||'').toUpperCase() %> (temps r√©el)</h3>
<div class="wchat">
  <div class="w-header">
    <div class="w-avatar"><%= ((user && user.nom) || 'AP').split(' ').map(x=>x[0]).join('').slice(0,2).toUpperCase() %></div>
    <div>
      <div class="w-name"><%= (user && user.nom) || '‚Äî' %></div>
      <div class="w-sub" id="presence">Connect√©s : ‚Äî</div>
    </div>
    <div style="margin-left:auto"><button class="btn" id="chatRefresh" type="button">‚Üª</button></div>
  </div>

  <div id="msgs" class="w-msgs"></div>
  <div id="typing" class="typing"></div>

  <!-- Barre ‚Äúr√©pondre √† ‚Ä¶‚Äù -->
  <div id="replyBar" class="w-replybar hidden" aria-live="polite">
    <div>
      <div class="name" id="replyName">‚Äî</div>
      <div class="snippet" id="replySnippet">‚Äî</div>
    </div>
    <button class="close" id="replyCancel" type="button">Annuler</button>
  </div>

  <form id="chatForm" class="w-input" autocomplete="off">
    <button class="icon" type="button" id="emojiBtn" title="Emoji">üôÇ</button>
    <input id="chatText" type="text" placeholder="Tapez un message‚Ä¶ (Entr√©e = envoyer, Shift+Entr√©e = ligne)">
    <input id="chatFile" type="file" class="hidden">
    <button class="icon" type="button" id="attachBtn" title="Joindre">üìé</button>
    <button class="send" type="submit" title="Envoyer">‚û§</button>
  </form>

  <div class="muted" style="margin-top:6px">Salon commun √† l‚Äôinspecteur et aux animateurs de l‚Äôinspection.</div>
</div>

        </div>
      </div>
    </aside>
  </div>
</div>

<!-- ============ MODALE PARAM√àTRES √âTABLISSEMENT ============ -->
<div class="modal" id="settingsModal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="settingsTitle">
    <header>
      <div>
        <h3 id="settingsTitle" style="margin:0;">‚öôÔ∏è Param√®tres √©tablissement</h3>
        <div class="subtle">Ces r√©glages servent de base √† vos collectes (effectifs, personnel et baselines par classe / discipline).</div>
      </div>
      <div class="toolbar">
        <button class="btn" id="btnCloseSettings">Fermer</button>
      </div>
    </header>
    <div class="content">
      <div class="cols-modal">
        <!-- ===== Colonne gauche : Effectifs + Personnel ===== -->
        <section class="pane">
          <div class="hstack">
            <div>
              <label class="subtle">Ann√©e scolaire</label>
              <input id="yearInput" type="text" value="" style="padding:6px 8px;border:1px solid var(--b);border-radius:8px;width:160px" />
            </div>
            <div style="margin-left:auto;display:flex;gap:6px;align-items:flex-end">
              <button class="btn" type="button" id="btnPrintStaff">üñ® Imprimer personnel</button>
              <button class="btn" type="button" id="btnExportStaff">‚¨áÔ∏è Export personnel</button>
            </div>
          </div>

          <h4 style="margin:12px 0 6px">Effectifs par classe</h4>
          <div class="hstack">
            <button class="btn" type="button" id="btnLoadClassesFromPreset">‚Ü∫ Charger classes par d√©faut (inspection)</button>
            <button class="btn" type="button" id="btnAddEff">+ Ajouter une classe</button>
          </div>
          <div class="bwrap eff">
            <table class="tbl-mini" id="effTable">
  <colgroup><col><col><col><col><col></colgroup>
  <thead>
    <tr>
      <th style="text-align:left">Classe (base)</th>
      <th>Div.</th>
      <th>F</th>
      <th>G</th>
      <th></th>
    </tr>
  </thead>
  <tbody id="effTbody"></tbody>
</table>
          </div>

          <h4 style="margin:12px 0 6px">Personnel enseignant</h4>
          <div class="hstack">
            <button class="btn" type="button" id="btnAddStaff">+ Ajouter un enseignant</button>
            <button class="btn" type="button" id="btnOpenStaffExplorer2">üë©‚Äçüè´ Fichier complet</button>
          </div>
          <div class="bwrap staff">
            <table class="tbl-mini" id="staffTable">
              <colgroup> <col><col><col><col><col><col> </colgroup>
              <thead><tr>
                <th style="text-align:left">Nom</th><th>Grade</th><th>Mati√®re</th><th>Statut</th><th>Obs.</th><th></th>
              </tr></thead>
              <tbody id="staffTbody"></tbody>
            </table>
          </div>
        </section>

        <!-- ===== Colonne droite : Baselines par Classe/Discipline ===== -->
        <section class="pane">
          <div class="hstack">
            <div>
              <label class="subtle">Cycle</label>
              <select id="bCycle">
                <option value="">‚Äî</option>
                <option value="premier">premier</option>
                <option value="second">second</option>
              </select>
            </div>
            <div>
              <label class="subtle">Sp√©cialit√©</label>
              <select id="bSpec"><option value="">‚Äî</option></select>
            </div>
            <div style="margin-left:auto;display:flex;gap:6px;flex-wrap:wrap">
              <button class="btn" id="btnSyncClasses">üîÅ Synchroniser classes depuis effectifs</button>
              <button class="btn" id="btnLoadBaselines">‚Üª Charger existants</button>
              <button class="btn" id="btnLoadBaselineDefaults">‚Ü∫ Charger d√©fauts</button>
            </div>
          </div>

          <div class="hstack">
            <div class="subtle">Classes (baselines)</div>
            <div style="margin-left:auto">
              <button class="btn ghost" id="btnAddClass">+ Classe</button>
              <button class="btn" id="btnRenameClass">‚úé Renommer</button>
              <button class="btn" id="btnDeleteClass">üóë Supprimer</button>
            </div>
          </div>

          <div style="display:grid;grid-template-columns:240px 1fr;gap:10px">
            <div class="classList" id="classList"></div>
            <div>
              <div class="hstack">
                <span class="chip" id="currentClassChip">‚Äî</span>
                <button class="btn" id="btnImportExpected">‚á¢ Importer disciplines attendues</button>
                <button class="btn" id="btnAddDisc">+ Discipline</button>
              </div>
              <div class="bwrap x">
                <table class="tbl-mini" id="bTable">
                  <thead>
                    <tr>
                      <th style="text-align:left">Discipline</th>
                      <th>Heures dues</th>
                      <th>Le√ßons pr√©vues</th>
                      <th>Le√ßons dig. pr√©v.</th>
                      <th>TP pr√©vus</th>
                      <th>TP dig. pr√©v.</th>
                      <th>Ens. en poste</th>
                      <th></th>
                    </tr>
                  </thead>
                  <tbody id="bTbody"></tbody>
                </table>
              </div>
              <div class="subtle" style="margin-top:6px">Ces valeurs seront <b>verrouill√©es</b> dans le formulaire de collecte (colonnes bleut√©es ¬´ d√ª ¬ª).</div>
            </div>
          </div>
        </section>
      </div>
    </div>
    <footer>
      <div class="subtle">Astuce : commencez par choisir le <b>cycle</b> et la <b>sp√©cialit√©</b> √† droite, puis chargez les <b>classes par d√©faut</b> pour saisir vos effectifs.</div>
      <div style="display:flex;gap:8px">
        <button class="btn" id="btnClose2">Fermer</button>
        <button class="btn primary" id="btnSaveAll">üíæ Enregistrer et fermer</button>
      </div>
    </footer>
  </div>
</div>

<!-- ===== MODALE EXPLORATEUR PERSONNEL (consultation fiche compl√®te) ===== -->
<div class="modal" id="staffExplorerModal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="staffExplorerTitle">
    <header>
      <div>
        <h3 id="staffExplorerTitle" style="margin:0;">üë©‚Äçüè´ Fichier complet du personnel enseignant</h3>
        <div class="subtle">Recherche, impression, export CSV, et √©dition des classes/disciples tenues par chaque enseignant.</div>
      </div>
      <div class="toolbar">
        <input id="staffSearch" type="text" placeholder="Rechercher (nom, mati√®re, classe, discipline)" style="padding:6px 8px;border:1px solid var(--b);border-radius:8px;width:260px">
        <button class="btn" type="button" onclick="printStaff()">üñ® Imprimer</button>
        <button class="btn" type="button" onclick="exportStaffCSV()">‚¨áÔ∏è Export CSV</button>
        <button class="btn" type="button" id="btnCloseStaffExplorer">Fermer</button>
      </div>
    </header>
    <div class="content" style="padding:12px">
      <table class="grid-staff" id="staffExplorerTable">
        <thead>
          <tr>
            <th>Nom</th><th>Grade</th><th>Mati√®re</th><th>Statut</th>
            <th>Classes tenues</th><th>Disciplines enseign√©es</th><th>Obs.</th><th></th>
          </tr>
        </thead>
        <tbody id="staffExplorerTbody"></tbody>
      </table>
    </div>
    <footer>
      <div class="subtle">Astuce : cliquez sur üìÑ <span class="kbd">Fiche</span> pour compl√©ter classes et disciplines d‚Äôun enseignant.</div>
      <div><button class="btn" id="btnCloseStaffExplorer2">Fermer</button></div>
    </footer>
  </div>
</div>

<!-- ===== MODALE FICHE ENSEIGNANT (√©dition enrichie) ===== -->
<div class="modal" id="staffSheetModal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="staffSheetTitle">
    <header>
      <div>
        <h3 id="staffSheetTitle" style="margin:0;">üìÑ Fiche enseignant</h3>
        <div class="subtle">Renseignez les classes tenues et les disciplines enseign√©es. Ces infos appara√Ætront dans l‚Äôimpression et l‚Äôexport.</div>
      </div>
      <div class="toolbar">
        <button class="btn" id="btnCloseStaffSheet">Fermer</button>
      </div>
    </header>
    <div class="content">
      <div class="cols-modal" style="grid-template-columns:1fr 1fr">
        <section class="pane">
          <h4 style="margin:6px 0 8px">Identit√©</h4>
          <div class="bwrap">
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Nom & pr√©nom</label>
                <input id="ssNom" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
            </div>
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Grade</label>
                <input id="ssGrade" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
              <div style="flex:1">
                <label class="subtle">Mati√®re</label>
                <input id="ssMatiere" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
            </div>
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Statut</label>
                <input id="ssStatut" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
            </div>
            <div>
              <label class="subtle">Observations</label>
              <textarea id="ssObs" style="width:100%;min-height:70px;padding:6px 8px;border:1px solid var(--b);border-radius:8px"></textarea>
            </div>
          </div>
        </section>
        <section class="pane">
          <h4 style="margin:6px 0 8px">Affectations</h4>
          <div class="bwrap">
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Classes tenues</label>
                <div id="ssClasses" style="display:flex;flex-wrap:wrap;gap:6px"></div>
              </div>
            </div>
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Disciplines enseign√©es</label>
                <div id="ssDisciplines" style="display:flex;flex-wrap:wrap;gap:6px"></div>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
    <footer>
      <div class="subtle">Ces informations sont locales √† l‚Äô√©tablissement et √† l‚Äôann√©e en cours.</div>
      <div style="display:flex;gap:8px">
        <button class="btn" id="btnStaffSheetCancel">Annuler</button>
        <button class="btn primary" id="btnStaffSheetSave">üíæ Enregistrer</button>
      </div>
    </footer>
  </div>
</div>
<script src="/socket.io/socket.io.js"></script> <script>
/* Polyfill ultra-robuste pour CSS.escape (MDN), si absent */
(function(global){
  if (global.CSS && typeof global.CSS.escape === "function") return;
  var CSS = global.CSS || (global.CSS = {});
  var _escape = function(value) {
    var string = String(value);
    var length = string.length;
    var index = -1;
    var codeUnit;
    var result = '';
    var firstCodeUnit = string.charCodeAt(0);
    while (++index < length) {
      codeUnit = string.charCodeAt(index);
      // Handle NULL
      if (codeUnit === 0x0000) {
        result += "\uFFFD";
        continue;
      }
      // Control characters
      if (
        (codeUnit >= 0x0001 && codeUnit <= 0x001F) ||
        codeUnit === 0x007F ||
        // start char restrictions
        (index === 0 && (
          (codeUnit >= 0x0030 && codeUnit <= 0x0039) || // [0-9]
          codeUnit === 0x002D || // hyphen-minus
          codeUnit === 0x002E   // dot
        )) ||
        // special chars
        codeUnit === 0x0020 || codeUnit === 0x0021 || codeUnit === 0x0022 ||
        codeUnit === 0x0023 || codeUnit === 0x0024 || codeUnit === 0x0025 ||
        codeUnit === 0x0026 || codeUnit === 0x0027 || codeUnit === 0x0028 ||
        codeUnit === 0x0029 || codeUnit === 0x002A || codeUnit === 0x002B ||
        codeUnit === 0x002C || codeUnit === 0x002F || codeUnit === 0x003A ||
        codeUnit === 0x003B || codeUnit === 0x003C || codeUnit === 0x003D ||
        codeUnit === 0x003E || codeUnit === 0x003F || codeUnit === 0x0040 ||
        codeUnit === 0x005B || codeUnit === 0x005C || codeUnit === 0x005D ||
        codeUnit === 0x005E || codeUnit === 0x0060 || codeUnit === 0x007B ||
        codeUnit === 0x007C || codeUnit === 0x007D || codeUnit === 0x007E
      ) {
        result += "\\" + codeUnit.toString(16) + " ";
      } else {
        result += string.charAt(index);
      }
    }
    return result;
  };
  CSS.escape = _escape;
})(window);
</script>

<script>
  function openModal(el){ el.classList.add('open'); el.setAttribute('aria-hidden','false'); }
function closeModal(el){ el.classList.remove('open'); el.setAttribute('aria-hidden','true'); }

document.querySelectorAll('.modal').forEach(m=>{
  m.addEventListener('click', (e)=>{ if(e.target===m) closeModal(m); });
});

document.addEventListener('keydown', (e)=>{
  if(e.key==='Escape'){ document.querySelectorAll('.modal.open').forEach(closeModal); }
});
/************************** SESSION **************************/
/* Injection s√ªre via JSON.stringify pour √©viter les &quot; dans le JS */
const CONNECTED_USER = <%- JSON.stringify({
  id: (user && user.id) || '',
  nom: (user && user.nom) || '',
  etab: (user && user.etab) || '',
  role: (user && user.role) || 'anim',
  inspection: (user && user.inspection) || 'artsplastiques',
  departement: (user && user.departement) || '‚Äî'
}) %>;

/******************** DOM (collecte) ********************/
const selCycle=document.getElementById('cycle');
const selSpec =document.getElementById('specialite');
const contSpec=document.getElementById('specialiteContainer');
const contEval=document.getElementById('evaluationContainer');
const btnPrefill=document.getElementById('btnPrefill');
const formulaires=document.getElementById('formulaires');
const cycleTotalBloc=document.getElementById('cycleTotalBloc');
const cycleTotalTitre=document.getElementById('cycleTotalTitre');
const cycleTotalTable=document.getElementById('cycleTotalTable');
const badgeClasses=document.getElementById('badgeClasses');
const sumSpec=document.getElementById('sumSpec');
const sumEval=document.getElementById('sumEval');
const sumClasses=document.getElementById('sumClasses');
const yearStat=document.getElementById('yearStat');
const effStaffStat=document.getElementById('effStaffStat');
const effStaffDetails=document.getElementById('effStaffDetails');
const effTableWrap=document.getElementById('effTableWrap');

// Afficher / charger selon les choix
selCycle.addEventListener('change', async () => {
  contSpec.classList.toggle('hidden', !selCycle.value);
  selSpec.innerHTML = '<option value="">-- Choisir --</option>';
  if (!selCycle.value) { contEval.classList.add('hidden'); formulaires.innerHTML=''; cycleTotalBloc.classList.add('hidden'); updateSummary(); return; }
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(selCycle.value)}&actif=true`);
    [...new Set(rows.map(r=>r.specialite))].sort().forEach(s=> selSpec.insertAdjacentHTML('beforeend', `<option value="${s}">${s}</option>`));
  }catch(_){}
  updateSummary();
});

selSpec.addEventListener('change', async () => {
  contEval.classList.toggle('hidden', !selSpec.value);
  if (selCycle.value && selSpec.value) { await buildCollecteFor(selCycle.value, selSpec.value); }
  updateSummary();
});

document.getElementById('evaluation').addEventListener('change', updateSummary);

// Pr√©remplir (version simple)
btnPrefill.addEventListener('click', applyEffectifCapsAndPrefill);

// R√©sum√© + badge
function updateSummary(){
  sumSpec.textContent = selSpec.value || '‚Äî';
  const ev = document.getElementById('evaluation').value;
  sumEval.textContent = ev ? `√âvaluation ${ev}` : '‚Äî';
  const nb = document.querySelectorAll('.classeBloc').length;
  sumClasses.textContent = String(nb);
  badgeClasses.textContent = `${nb} classe${nb>1?'s':''}`;
  badgeClasses.classList.toggle('hidden', nb===0);
}

// Impression (basique)
function printCollecte(){ window.print(); }

/******************** CACHE PARAMS √âTABLISSEMENT ********************/
let SETTINGS_CACHE=null;

/******************** HELPERS API ********************/
async function getJSON(url){
  const r=await fetch(url,{credentials:'same-origin'});
  if(!r.ok) throw new Error('HTTP '+r.status);
  return r.json();
}
async function postJSON(url,body){
  const r=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',body:JSON.stringify(body)});
  const data=await r.json().catch(()=>({}));
  if(!r.ok) throw new Error(data?.error||('HTTP '+r.status));
  return data;
}
async function postFirstOk(urls, body){
  let lastErr = null;
  for(const u of urls){
    try{ return await postJSON(u, body); }catch(e){ lastErr = e; }
  }
  throw lastErr || new Error('√âchec de l‚Äôenvoi');
}
function getSchoolYear(){
  const d=new Date(), y=d.getFullYear(), m=d.getMonth();
  return (m>=7)? `${y}-${y+1}` : `${y-1}-${y}`;
}

/***** Effectifs par classe (helper) *****/
function getClassEffectifByName(name){
  const list = SETTINGS_CACHE?.effectifs || [];
  const base = splitClassLabel(name).base.trim().toLowerCase();
  return list
    .filter(e => splitClassLabel(e.classe||'').base.trim().toLowerCase() === base)
    .reduce((s,e)=> s + (+e.filles||0) + (+e.garcons||0), 0);
}


/******************** TABLES & CALCULS (collecte) ********************/
function tableHead(){
  return `
  <thead>
    <tr>
      <th rowspan="2" style="text-align:left">Module / Discipline</th>
      <th colspan="3">Couverture des heures</th>
      <th colspan="6">Couverture des programmes</th>
      <th colspan="6">R√©alisation des TP</th>
      <th colspan="3">R√©ussite des √©l√®ves</th>
      <th colspan="3">Assiduit√© et ponctualit√© des enseignants</th>
    </tr>
    <tr>
      <th>Heures dues</th><th>Heures faites</th><th>%</th>
      <th>Nbre de le√ßons pr√©vues</th><th>Nbre de le√ßons faites</th><th>%</th>
      <th>Nbre de le√ßons digitalis√©es pr√©vues</th><th>Nbre de le√ßons digitalis√©es faites</th><th>%</th>
      <th>Nbre pr√©vu</th><th>Nbre fait</th><th>%</th>
      <th>Nbre digitalis√© pr√©vu</th><th>Nbre digitalis√© fait</th><th>%</th>
      <th>Nbre d'√©l√®ves ayant compos√©</th><th>Nbre de moy ‚â• 10/20</th><th>% de r√©ussite</th>
      <th>Effectif des enseignants</th><th>En poste</th><th>%</th>
    </tr>
  </thead>`;
}
function lineHTML(nom){
  return `
  <tr>
    <td contenteditable="true">${nom}</td>
    ${Array.from({length:21}).map((_,i)=> (i+1)%3===0 ? `<td class="pct${i+1}">‚Äî</td>` : `<td><input type="number" class="val${i+1}" min="0"></td>` ).join('')}
  </tr>`;
}

/***** Pr√©-remplissage/caps avec effectifs *****/
function applyEffectifCapsAndPrefillFor(bloc){
  const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
  const eff = getClassEffectifByName(cls);
  const rows = bloc.querySelectorAll('tbody tr:not(.totalRow)');
  rows.forEach(tr=>{
    const comp = tr.querySelector('.val16');
    const m10 = tr.querySelector('.val17');
    if (comp){
      const v = +comp.value||0;
      if (eff>0 && v===0) comp.value = eff;
      if (eff>0 && +comp.value>eff) comp.value = eff;
    }
    if (m10 && comp && (+m10.value > +comp.value)) m10.value = comp.value;
  });
}
function applyEffectifCapsAndPrefill(){
  document.querySelectorAll('.classeBloc').forEach(applyEffectifCapsAndPrefillFor);
  recalcAll();
}
/* ==== Helpers libell√©s de classe avec divisions ==== */
function _clean(s){ return String(s||'').replace(/\s+/g,' ').trim(); }
function splitClassLabel(label){
  const raw=_clean(label);
  const m = raw.match(/\s*(?:\(|#|-|\/)\s*(\d+)\s*\)?\s*$/);
  if(!m) return { base: raw, division: 1, label: raw };
  const div = Number(m[1]||'1')||1;
  const base = _clean(raw.slice(0, m.index));
  return { base, division: div, label: `${base} (${div})` };
}
function makeClassLabel(base, division=1){ base=_clean(base); return (division && division!==1) ? `${base} (${division})` : base; }
function canonical(label){ return splitClassLabel(label).base; }

/***** NOUVEAU : helpers & chargeur collecte *****/
function uniq(arr){ return [...new Set(arr.map(s => String(s||'').trim()))]; }
async function getBaselinesCouple(cyc, spec){
  const annee = getSchoolYear();
  try{
    const rows = await getJSON(`/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    if (rows?.length) return rows;
  }catch(_){/* ignore */}
  try{
    const rows = await getJSON(`/api/settings/baselines/defaults?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    return rows||[];
  }catch(_){ return []; }
}
async function getPresetClassesCouple(cyc, spec){
  try{
    const r = await getJSON(`/api/presets?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    return r?.classes || [];
  }catch(_){ return []; }
}
async function buildCollecteFor(cyc, spec){
  formulaires.innerHTML='';
  const annee = getSchoolYear();
  const baselines = await getBaselinesCouple(cyc, spec);
  let allowed = uniq(baselines.map(b => b.classe));
  if (!allowed.length) allowed = uniq(await getPresetClassesCouple(cyc, spec));
  let collecte = null;
  try{ collecte = await getJSON(`/api/collecte/form-ap?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`); }catch(_){/* no previous */}
  const byClass = new Map((collecte?.classes||[]).map(c => [String(c.classe||c.nom).trim(), c.disciplines || []]));
  if (!allowed.length && byClass.size) allowed = [...byClass.keys()];
allowed.forEach(base => {
  // toutes les classes pr√©c√©demment saisies dont la base = base
  const previous = [...byClass.keys()].filter(k => canonical(k) === canonical(base));
  if(previous.length){
    previous.forEach(full => {
      const rows = byClass.get(full) || [];
      createClassBlockFromAPI(full, rows);
    });
  }else{
    // aucune division pr√©c√©dente ‚Üí on cr√©e la (1)
    const baseRows = baselines.filter(b => String(b.classe).trim() === String(base).trim());
    const rows = baseRows.map(b => ({
      discipline: b.discipline,
      hD:+b.heuresDues||0, lp:+b.leconsPrevues||0, ldp:+b.leconsDigPrevues||0,
      tp:+b.tpPrevus||0,   tdp:+b.tpDigPrevus||0,   effTot:+b.enseignantsPoste||0
    }));
    createClassBlockFromAPI(makeClassLabel(base,1), rows);
  }
});
  buildCycleTotalTable();
  applyEffectifCapsAndPrefill();
  updateSummary();
}

/***** Cr√©ation des blocs de classe *****/
function createClassBlockFromAPI(classe, rows){
  const wrap=document.createElement('section');
  wrap.className='bloc classeBloc';
  const sp = splitClassLabel(classe);
wrap.dataset.classBase = sp.base;
wrap.dataset.division  = String(sp.division||1);

  wrap.innerHTML = `
  <header>
    <h2>${classe}</h2>
    <div class="actions">
      <button class="btn js-add-division" type="button">+ Ajouter une division</button>
      <button class="btn js-remove-division" type="button" style="display:none">Supprimer cette division</button>
      <button class="btn" onclick="addLine(this)">+ Ajouter une discipline</button>
      <button class="btn" onclick="resetDefaults(this)">‚Ü∫ Disciplines par d√©faut</button>
    </div>
  </header>
  <input type="hidden" data-field="className" value="${classe}">
  <table>${tableHead()}<tbody></tbody></table>`;


  const tbody=wrap.querySelector('tbody');
  (rows||[]).forEach(r=>{
    const holder=document.createElement('tbody');
    holder.innerHTML = lineHTML(r.discipline || r.nom || '');
    const tr = holder.firstElementChild;
    tbody.appendChild(tr);
    const setFixed = (i,val)=>{
      const input = tr.querySelector(`.val${i}`);
      if(!input) return; input.value = +val||0; input.readOnly=true; input.classList.add('fixed'); input.title='Valeur cible (baseline)';
    };
    setFixed(1, r.hD); setFixed(4, r.lp); setFixed(7, r.ldp); setFixed(10, r.tp); setFixed(13, r.tdp); setFixed(19, r.effTot);
    const setDone=(i,val)=>{ const input = tr.querySelector(`.val${i}`); if(input) input.value = +val||0; };
    setDone(2, r.hF); setDone(5, r.lf); setDone(8, r.ldf); setDone(11, r.tf); setDone(14, r.tdf); setDone(16, r.comp); setDone(17, r.m10); setDone(20, r.effPos);
  });
  const total=document.createElement('tr');
  total.className='totalRow';
  total.innerHTML = `<td><strong>total ${classe}</strong></td>` +
    Array.from({length:21}).map((_,i)=> (i+1)%3===0 ? `<td class="total pct${i+1}"><strong>‚Äî</strong></td>` : `<td class="total sum sum${i+1}"><strong>0</strong></td>` ).join('');
  tbody.appendChild(total);
  wrap.querySelectorAll('input[type=number]').forEach(i=> i.addEventListener('input',recalcAll));
  formulaires.appendChild(wrap);
  applyEffectifCapsAndPrefillFor(wrap);
}
/* ==== Multi-divisions : dupliquer / renum√©roter / supprimer ==== */
function renumberDivision(block, base, div){
  block.dataset.classBase = base;
  block.dataset.division  = String(div);
  const h2 = block.querySelector('h2');
  const label = makeClassLabel(base, div);
  if(h2) h2.textContent = label;
  const hidden = block.querySelector('input[data-field="className"]');
  if(hidden) hidden.value = label;
  // bouton "supprimer" visible d√®s la division 2
  const del = block.querySelector('.js-remove-division');
  if(del) del.style.display = (div>1) ? '' : 'none';
}

function addDivisionFromBlock(block){
  const base = block.dataset.classBase || canonical(block.querySelector('h2')?.textContent||'');
  const cont = block.parentElement;
  const siblings = cont.querySelectorAll(`.classeBloc[data-class-base="${CSS.escape(base)}"]`);
  const nextDiv = siblings.length + 1;

  const clone = block.cloneNode(true);
  // vider toutes les valeurs "fait"
  clone.querySelectorAll('input[type=number]').forEach(i=> i.value='');
  // retirer les lignes (sauf la premi√®re si tu pr√©f√®res)
  clone.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr=>{
    tr.querySelectorAll('input').forEach(inp=>{ if(!inp.readOnly) inp.value=''; });
  });
  cont.insertBefore(clone, block.nextSibling);
  // rattacher les √©couteurs de calcul
  clone.querySelectorAll('input[type=number]').forEach(i=> i.addEventListener('input', recalcAll));
  renumberDivision(clone, base, nextDiv);
  applyEffectifCapsAndPrefillFor(clone);
  recalcAll();
}

function removeDivisionFromBlock(block){
  const base = block.dataset.classBase || canonical(block.querySelector('h2')?.textContent||'');
  const cont = block.parentElement;
  const all  = [...cont.querySelectorAll(`.classeBloc[data-class-base="${CSS.escape(base)}"]`)];
  if(all.length<=1) return; // ne pas supprimer la (1)
  block.remove();
  // renum√©roter 1..N
  [...cont.querySelectorAll(`.classeBloc[data-class-base="${CSS.escape(base)}"]`)]
    .forEach((b,i)=> renumberDivision(b, base, i+1));
  recalcAll();
}

// D√©l√©gation de clics
document.addEventListener('click', (e)=>{
  const addBtn = e.target.closest('.js-add-division');
  if(addBtn){
    const block = addBtn.closest('.classeBloc');
    if(block) addDivisionFromBlock(block);
  }
  const delBtn = e.target.closest('.js-remove-division');
  if(delBtn){
    const block = delBtn.closest('.classeBloc');
    if(block) removeDivisionFromBlock(block);
  }
});

const pctTxt=(a,b)=> a>0 ? ((b/a)*100).toFixed(2)+' %' : '‚Äî';

/* === recalculs (lignes + totaux classe) avec plafonds === */
function recalcAll(){
  document.querySelectorAll('.classeBloc tbody tr:not(.totalRow)').forEach(tr=>{
    const v=i=> tr.querySelector(`.val${i}`)?.valueAsNumber||0;
    [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]
      .forEach(([a,b,p])=> tr.querySelector(`.pct${p}`).textContent=pctTxt(v(a),v(b)));
  });

  document.querySelectorAll('.classeBloc table').forEach(tbl=>{
    const bloc=tbl.closest('.classeBloc');
    const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
    const eff = getClassEffectifByName(cls);
    const rows=[...tbl.tBodies[0].rows];
    const total=rows[rows.length-1];
    const data=rows.slice(0,-1);
    const sum=n => data.reduce((acc,tr)=> acc+(+tr.querySelector(`.val${n}`)?.value||0),0);
    [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[19,20,21]].forEach(([a,b,p])=>{
      const A=sum(a), B=sum(b);
      total.querySelector(`.sum${a}`).innerHTML=`<strong>${A}</strong>`;
      total.querySelector(`.sum${b}`).innerHTML=`<strong>${B}</strong>`;
      total.querySelector(`.pct${p}`).innerHTML=`<strong>${pctTxt(A,B)}</strong>`;
    });
    const compTot = sum(16);
    const m10Tot  = Math.min(sum(17), compTot);
    total.querySelector('.sum16').innerHTML = `<strong>${compTot}</strong>`;
    total.querySelector('.sum17').innerHTML = `<strong>${m10Tot}</strong>`;
    total.querySelector('.pct18').innerHTML = `<strong>${pctTxt(compTot,m10Tot)}</strong>`;
  });
  calcCycleTotal();
}

/* limiter ‚Äúfait ‚â§ d√ª‚Äù + cap par effectif */
document.addEventListener('input', e=>{
  if(!(e.target.matches('input[type=number]') && e.target.closest('.classeBloc'))) return;
  const bloc=e.target.closest('.classeBloc');
  const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
  const eff = getClassEffectifByName(cls);
  const row=e.target.closest('tr');
  if(!row) return;
  const inputs=[...row.querySelectorAll('input[type=number]')];
  for(let i=0;i<inputs.length;i+=2){
    const due=+inputs[i].value||0; const faitEl = inputs[i+1]; if(!faitEl) continue; if((+faitEl.value)>due) faitEl.value=due;
  }
  const comp=row.querySelector('.val16'); const m10 =row.querySelector('.val17');
  if(eff>0 && comp && (+comp.value>eff)) comp.value=eff;
  if(m10 && comp && (+m10.value>+comp.value)) m10.value=comp.value;
  recalcAll();
});

function addLine(btn){
  const bloc=btn.closest('.classeBloc');
  const tbody=bloc.querySelector('tbody');
  const total=tbody.querySelector('.totalRow');
  const holder=document.createElement('tbody');
  holder.innerHTML=lineHTML('Nouvelle discipline');
  const tr=holder.firstElementChild;
  tbody.insertBefore(tr,total);
  tr.querySelectorAll('input').forEach(i=> i.addEventListener('input',recalcAll));
  const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
  const eff = getClassEffectifByName(cls);
  if (eff>0) tr.querySelector('.val16').value = eff;
  recalcAll();
}
async function resetDefaults(btn){
  const bloc = btn.closest('.classeBloc');
  const label = bloc.querySelector('h2').textContent.trim();
  const { base } = splitClassLabel(label);
  const spec = selSpec.value, cyc = selCycle.value, annee = getSchoolYear();

  let rows = [];
  try{
    // 1) tenter depuis la derni√®re collecte (exact label)
    const data = await getJSON(`/api/collecte/form-ap?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const cls = (data?.classes||[]).find(c=> String(c.classe).trim()===label);
    if(cls) rows = cls.disciplines||[];
  }catch(_){}

  if(!rows.length){
    // 2) fallback: baselines de la classe "base"
    const bl = await getBaselinesCouple(cyc, spec);
    rows = bl.filter(b=> String(b.classe).trim()===base)
             .map(b=>({ discipline:b.discipline, hD:+b.heuresDues||0, lp:+b.leconsPrevues||0, ldp:+b.leconsDigPrevues||0,
                        tp:+b.tpPrevus||0, tdp:+b.tpDigPrevus||0, effTot:+b.enseignantsPoste||0 }));
  }
  if(!rows.length) return;

  const tbody=bloc.querySelector('tbody');
  // purge & recharge
  [...tbody.querySelectorAll('tr:not(.totalRow)')].forEach(tr=> tr.remove());
  rows.forEach(r=>{
    const holder=document.createElement('tbody');
    holder.innerHTML = lineHTML(r.discipline||'');
    const tr = holder.firstElementChild;
    tbody.insertBefore(tr, tbody.querySelector('.totalRow'));
    // poser les valeurs d√©faut (d√ª) et lib√©rer les "fait"
    const setFixed = (i,val)=>{ const input = tr.querySelector(`.val${i}`); if(!input) return; input.value=+val||0; input.readOnly=true; input.classList.add('fixed'); };
    setFixed(1,r.hD); setFixed(4,r.lp); setFixed(7,r.ldp); setFixed(10,r.tp); setFixed(13,r.tdp); setFixed(19,r.effTot);
  });
  bloc.querySelectorAll('input[type=number]').forEach(i=> i.addEventListener('input',recalcAll));
  applyEffectifCapsAndPrefillFor(bloc);
  recalcAll();
}


/***** Total / moyenne du cycle *****/
function buildCycleTotalTable(){
  cycleTotalTitre.textContent=`Total/Moyenne ${selCycle.value==='premier'?'1er':'2nd'} cycle`;
  cycleTotalTable.innerHTML=tableHead()+"<tbody><tr class=\"cycleRow\"></tr></tbody>";
  const row=cycleTotalTable.querySelector('.cycleRow');
  row.innerHTML = `<td><strong>${cycleTotalTitre.textContent}</strong></td>` +
    Array.from({length:21}).map((_,i)=> (i+1)%3===0 ? `<td class="cycle pct${i+1}"><strong>‚Äî</strong></td>` : `<td class="cycle sum sum${i+1}"><strong>0</strong></td>` ).join('');
  cycleTotalBloc.classList.remove('hidden');
}
function calcCycleTotal(){
  const row=cycleTotalTable.querySelector('.cycleRow'); if(!row) return;
  const totals = Array(22).fill(0); // 1..21
  document.querySelectorAll('.classeBloc table').forEach(tbl=>{
    const bloc=tbl.closest('.classeBloc');
    const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
    const eff = getClassEffectifByName(cls);
    const rows=[...tbl.tBodies[0].rows];
    const data=rows.slice(0,-1);
    const sum=n => data.reduce((acc,tr)=> acc+(+tr.querySelector(`.val${n}`)?.value||0),0);
    [1,2,4,5,7,8,10,11,13,14,19,20].forEach(n=> totals[n]+=sum(n));
    totals[16] += sum(16);
    totals[17] += Math.min(sum(17), sum(16));
  });
  [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]
    .forEach(([a,b,p])=>{
      row.querySelector(`.sum${a}`).innerHTML=`<strong>${totals[a]}</strong>`;
      row.querySelector(`.sum${b}`).innerHTML=`<strong>${totals[b]}</strong>`;
      row.querySelector(`.pct${p}`).innerHTML=`<strong>${pctTxt(totals[a],totals[b])}</strong>`;
    });
}

/******************** EXPORT / SUBMIT ********************/
function headerCSV(){
  return ['Classe','Discipline','Heures dues','Heures faites','% Heures','Le√ßons pr√©vues','Le√ßons faites','% Le√ßons','Le√ßons digit. pr√©v.','Le√ßons digit. faites','% Le√ßons digit.','TP pr√©vus','TP faits','% TP','TP digit. pr√©v.','TP digit. faits','% TP digit.',"√âl√®ves comp.","Moy ‚â• 10/20","% r√©ussite","Eff. ens.","En poste","% poste"];
}
function v(tr, cls){ const el=tr.querySelector(cls); return el?(+el.value||0):0; }
function pctNum(a,b){ return a>0 ? ((b/a)*100).toFixed(2) : ''; }
function exportCSV(){
  const out=[]; out.push(headerCSV());
  document.querySelectorAll('.classeBloc').forEach(bloc=>{
    const cls=bloc.querySelector('h2').textContent; const rows=[...bloc.querySelectorAll('tbody tr:not(.totalRow)')];
    rows.forEach(tr=>{
      out.push([cls, tr.cells[0].textContent.trim(), v(tr,'.val1'), v(tr,'.val2'), pctNum(v(tr,'.val1'),v(tr,'.val2')),
        v(tr,'.val4'), v(tr,'.val5'), pctNum(v(tr,'.val4'),v(tr,'.val5')),
        v(tr,'.val7'), v(tr,'.val8'), pctNum(v(tr,'.val7'),v(tr,'.val8')),
        v(tr,'.val10'),v(tr,'.val11'),pctNum(v(tr,'.val10'),v(tr,'.val11')),
        v(tr,'.val13'),v(tr,'.val14'),pctNum(v(tr,'.val13'),v(tr,'.val14')),
        v(tr,'.val16'),v(tr,'.val17'),pctNum(v(tr,'.val16'),v(tr,'.val17')),
        v(tr,'.val19'),v(tr,'.val20'),pctNum(v(tr,'.val19'),v(tr,'.val20'))
      ]);
    });
  });
  const cyc=cycleTotalTitre.textContent, row=cycleTotalTable.querySelector('.cycleRow');
  if(row){
    const t = i => {
  const raw = row.querySelector(`.sum${i}`)?.textContent?.trim() ?? '';
  const n = Number(raw.replace(/\s/g,''));
  return Number.isFinite(n) ? n : 0;
};
    const P=b=> row.querySelector(`.pct${b}`).textContent.replace('%','').trim();
    out.push([cyc,'', t(1),t(2),P(3), t(4),t(5),P(6), t(7),t(8),P(9), t(10),t(11),P(12), t(13),t(14),P(15), t(16),t(17),P(18), t(19),t(20),P(21)]);
  }
  const csv=out.map(r=>r.map(x=>{ const s=String(x??''); return /[",;\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s; }).join(';')).join('\n');
  const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'});
  const url=URL.createObjectURL(blob);
  const a=document.createElement('a');
  const spec=selSpec.value||'spec';
  const cycLabel=selCycle.value==='premier'?'1er-cycle':'2nd-cycle';
  a.href=url; a.download=`collecte_${cycLabel}_${spec}.csv`;
  document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
}

// ===== Nouvelle construction + envoi de la "carte scolaire" =====
function buildCarteScolairePayload(){
  const evaluation = +document.getElementById('evaluation').value || null;
  const payload = {
    meta: {
      inspection: CONNECTED_USER.inspection,
      etablissement: CONNECTED_USER.etab,
      animateur: CONNECTED_USER.nom,
      departement: CONNECTED_USER.departement,
      annee: SETTINGS_CACHE?.annee || getSchoolYear(),
      cycle: selCycle.value || '',
      specialite: selSpec.value || '',
      evaluation: evaluation,
      generatedAt: new Date().toISOString()
    },
    effectifs: SETTINGS_CACHE?.effectifs || [],
    staff: SETTINGS_CACHE?.staff || [],
    classes: []
  };
  document.querySelectorAll('.classeBloc').forEach(bloc=>{
    const cls=bloc.querySelector('h2')?.textContent?.trim(); if(!cls) return;
    const classe={ nom:cls, disciplines:[] };
    bloc.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr=>{
      const val=i=> tr.querySelector(`.val${i}`)?.valueAsNumber||0;
      const nom=tr.cells[0].textContent.trim(); if(!nom) return;
      classe.disciplines.push({
        nom,
        heuresDues:val(1), heuresFaites:val(2),
        leconsPrevues:val(4), leconsFaites:val(5),
        leconsDigPrevues:val(7), leconsDigFaites:val(8),
        tpPrevus:val(10), tpFaits:val(11),
        tpDigPrevus:val(13), tpDigFaits:val(14),
        elevesComposants:val(16), elevesMoySup10:val(17),
        effTot:val(19), effPos:val(20)
      });
    });
    if(classe.disciplines.length) payload.classes.push(classe);
  });
  return payload;
}

async function soumettreCarteScolaire(){
  if(!selCycle.value) return alert('S√©lectionnez un cycle.');
  if(!selSpec.value) return alert('S√©lectionnez une sp√©cialit√©.');
  const evaluation = +document.getElementById('evaluation').value || null;
  if(!evaluation) return alert("S√©lectionnez une √©valuation.");

  const carte = buildCarteScolairePayload();
  try{
    document.getElementById('btnSendCarteDirect').disabled = true;
    const res = await postFirstOk(
      ['/api/carte/submit', '/api/inspecteur/carte-scolaire', '/api/carte'], // ordre de pr√©f√©rence
      carte
    );
    if(typeof io!=='undefined' && window.socket){
      window.socket.emit('carte:send', {ok:true, meta: carte.meta});
    }
    alert(res?.message || 'Carte scolaire envoy√©e √† l‚Äôinspecteur.');
  }catch(e){
    alert('Envoi de la carte: '+ e.message);
  }finally{
    document.getElementById('btnSendCarteDirect').disabled = false;
  }
}

let sending=false;
function groupCollecteByBase(classList){
  const byBase = new Map();
  for(const c of classList){
    const base = splitClassLabel(c.nom).base;
    if(!byBase.has(base)) byBase.set(base, new Map());          // discipline -> totaux
    const dmap = byBase.get(base);
    for(const d of (c.disciplines||[])){
      const key = String(d.nom||d.discipline||'').trim();
      if(!key) continue;
      if(!dmap.has(key)){
        dmap.set(key, { nom:key, hD:0,hF:0,lp:0,lf:0,ldp:0,ldf:0,tp:0,tf:0,tdp:0,tdf:0,comp:0,m10:0,effTot:0,effPos:0 });
      }
      const t = dmap.get(key);
      t.hD  += +d.hD  || +d.heuresDues  || 0;
      t.hF  += +d.hF  || +d.heuresFaites|| 0;
      t.lp  += +d.lp  || +d.leconsPrevues||0;
      t.lf  += +d.lf  || +d.leconsFaites ||0;
      t.ldp += +d.ldp || +d.leconsDigPrevues||0;
      t.ldf += +d.ldf || +d.leconsDigFaites ||0;
      t.tp  += +d.tp  || +d.tpPrevus  || 0;
      t.tf  += +d.tf  || +d.tpFaits   || 0;
      t.tdp += +d.tdp || +d.tpDigPrevus||0;
      t.tdf += +d.tdf || +d.tpDigFaits ||0;
      t.comp+= +d.comp|| +d.elevesComposants||0;
      t.m10 += +d.m10 || +d.elevesMoySup10 ||0;
      t.effTot += +d.effTot || 0;
      t.effPos += +d.effPos || 0;
    }
  }
  return [...byBase.entries()].map(([base,discMap])=>({ nom: base, disciplines: [...discMap.values()] }));
}

async function soumettre(){
  if(sending) return;
  const evalNum=+document.getElementById('evaluation').value;
  if(!selCycle.value) return alert('S√©lectionnez un cycle.');
  if(!selSpec.value) return alert('S√©lectionnez une sp√©cialit√©.');
  if(!evalNum) return alert('S√©lectionnez une √©valuation.');

  const payload={
    cycle:selCycle.value,
    specialite:selSpec.value,
    evaluation:evalNum,
    etablissement:CONNECTED_USER.etab,
    animateur:CONNECTED_USER.nom,
    departement: CONNECTED_USER.departement,
    classes:[]
  };
  document.querySelectorAll('.classeBloc').forEach(bloc=>{
    const cls=bloc.querySelector('h2')?.textContent?.trim(); if(!cls) return;
    const classe={ nom:cls, disciplines:[] };
    bloc.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr=>{
      const val=i=> tr.querySelector(`.val${i}`)?.valueAsNumber||0;
      const nom=tr.cells[0].textContent.trim(); if(!nom) return;
      classe.disciplines.push({ nom,
        hD:val(1), hF:val(2),
        lp:val(4), lf:val(5),
        ldp:val(7), ldf:val(8),
        tp:val(10), tf:val(11),
        tdp:val(13), tdf:val(14),
        comp:val(16), m10:val(17),
        effTot:val(19), effPos:val(20)
      });
    });
    payload.classes.push(classe);
  });
  payload.classes = groupCollecteByBase(payload.classes);
  if(SETTINGS_CACHE){
    payload.effectifs = SETTINGS_CACHE.effectifs||[];
    payload.staff = SETTINGS_CACHE.staff||[];
    payload.annee = SETTINGS_CACHE.annee||getSchoolYear();
  }

  try{
    sending=true; document.getElementById('btnSoumettre').disabled=true;
    const r=await fetch('/collecte',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload), credentials:'same-origin' });
    const data=await r.json().catch(()=>({}));
    if(!r.ok) throw new Error(data?.error||'Erreur serveur');

    // Option: envoyer la carte scolaire au m√™me moment
    const doitEnvoyerCarte = document.getElementById('chkSendCarte')?.checked;
    if(doitEnvoyerCarte){
      try{ await soumettreCarteScolaire(); }catch(_){ /* d√©j√† alert√© */ }
    }

    alert(data.message||'Fiche enregistr√©e');
    location.href='/collecte/mes';
  }catch(e){ alert('Erreur : '+e.message); }
  finally{ sending=false; document.getElementById('btnSoumettre').disabled=false; }
}

/******************** Uploader & Chat ********************/
/******************** Uploader & Chat ********************/
const drop = document.getElementById('drop');
const pick = document.getElementById('pick');
const fileInput = document.getElementById('fileInput');
const filesBox = document.getElementById('files');

/* ---- File manager (inchang√©) ---- */
let FILES_CACHE = [];
let FILES_FILTER = 'all';
let FILES_QUERY = '';
let FILES_SORT = 'date_desc';
const fileFilters = document.getElementById('fileFilters');
const fileSearch = document.getElementById('fileSearch');
const fileSort = document.getElementById('fileSort');

pick.addEventListener('click', ()=> fileInput.click());
['dragenter','dragover'].forEach(ev=> drop.addEventListener(ev, e=>{ e.preventDefault(); e.stopPropagation(); drop.classList.add('drag'); }));
['dragleave','drop'].forEach(ev=> drop.addEventListener(ev, e=>{ e.preventDefault(); e.stopPropagation(); drop.classList.remove('drag'); }));
drop.addEventListener('drop', e=> handleFiles(e.dataTransfer.files));
fileInput.addEventListener('change', e=> handleFiles(e.target.files));

function extOf(name){ const m=String(name||'').toLowerCase().match(/\.([a-z0-9]+)$/); return m?m[1]:''; }
function kindOf(ext){
  if(['pdf'].includes(ext)) return 'pdf';
  if(['png','jpg','jpeg','gif','webp','bmp','svg'].includes(ext)) return 'image';
  if(['xls','xlsx','csv','ods'].includes(ext)) return 'sheet';
  if(['doc','docx','odt','txt','rtf','md'].includes(ext)) return 'doc';
  if(['ppt','pptx','odp'].includes(ext)) return 'slide';
  if(['zip','rar','7z','tar','gz'].includes(ext)) return 'archive';
  return 'other';
}
function iconOf(kind){ return { pdf:'üìï', image:'üñºÔ∏è', sheet:'üìä', doc:'üìù', slide:'üìΩÔ∏è', archive:'üì¶', other:'üìÑ' }[kind]||'üìÑ'; }
function fmtSize(b){ b=+b||0; if(b<1024) return b+' o'; if(b<1024*1024) return (b/1024).toFixed(1)+' Ko'; if(b<1024*1024*1024) return (b/1024/1024).toFixed(1)+' Mo'; return (b/1024/1024/1024).toFixed(2)+' Go'; }
function normalizeFile(f){
  const name=f.name||f.filename||'document';
  const url=f.url||f.href||'#';
  const size=f.size||0;
  const uploadedAt = Date.parse(f.uploadedAt||f.mtime||f.date||f.updatedAt||'')||0;
  const uploader = f.uploader||f.author||'';
  const ext = extOf(name); const kind = kindOf(ext);
  return { name, url, size, uploadedAt, uploader, ext, kind };
}
function renderFiles(){
  let list = FILES_CACHE.slice();
  if(FILES_FILTER!=='all') list = list.filter(f=> f.kind===FILES_FILTER);
  if(FILES_QUERY) list = list.filter(f=> (f.name||'').toLowerCase().includes(FILES_QUERY));
  list.sort((a,b)=>{
    switch(FILES_SORT){
      case 'date_asc':  return (a.uploadedAt||0)-(b.uploadedAt||0);
      case 'name_asc':  return (a.name||'').localeCompare(b.name||'');
      case 'name_desc': return (b.name||'').localeCompare(a.name||'');
      case 'size_desc': return (b.size||0)-(a.size||0);
      case 'size_asc':  return (a.size||0)-(b.size||0);
      default:          return (b.uploadedAt||0)-(a.uploadedAt||0);
    }
  });

  filesBox.innerHTML = '';
  if(!list.length){
    filesBox.innerHTML = '<div class="muted" style="padding:6px">Aucun document.</div>';
    return;
  }

  list.forEach(f=>{
    const d = new Date(f.uploadedAt || Date.now());
    const subBits = [
      f.ext ? f.ext.toUpperCase() : '',
      fmtSize(f.size),
      isNaN(d.getTime()) ? '' : d.toLocaleDateString(),
      f.uploader ? ('par ' + f.uploader) : ''
    ].filter(Boolean);

    const card = document.createElement('div'); card.className='filecard';
    const icon = document.createElement('div'); icon.className='fileicon'; icon.textContent = iconOf(f.kind);
    const meta = document.createElement('div'); meta.className='filemeta';

    const nameDiv = document.createElement('div'); nameDiv.className='name';
    const a = document.createElement('a'); a.href=f.url; a.target="_blank"; a.rel="noopener noreferrer"; a.textContent = f.name||'document';
    nameDiv.appendChild(a);

    const sub = document.createElement('div'); sub.className='sub';
    subBits.forEach(bit=>{ const span=document.createElement('span'); span.textContent=String(bit); sub.appendChild(span); });

    meta.appendChild(nameDiv);
    meta.appendChild(sub);
    card.appendChild(icon);
    card.appendChild(meta);
    filesBox.appendChild(card);
  });
}

function updateFileCounters(){
  const counters = {all:FILES_CACHE.length,pdf:0,image:0,sheet:0,doc:0,slide:0,archive:0,other:0};
  FILES_CACHE.forEach(f=> counters[f.kind] = (counters[f.kind]||0)+1);
  Object.keys(counters).forEach(k=>{ const el=document.getElementById('cnt_'+k); if(el) el.textContent = `(${counters[k]||0})`; });
}
function setActiveFilterButton(){ fileFilters.querySelectorAll('[data-ftype]').forEach(btn=>{ btn.classList.toggle('active', btn.getAttribute('data-ftype')===FILES_FILTER); }); }
fileFilters.addEventListener('click', e=>{ const btn=e.target.closest('[data-ftype]'); if(!btn) return; FILES_FILTER = btn.getAttribute('data-ftype')||'all'; setActiveFilterButton(); renderFiles(); });
fileSearch.addEventListener('input', ()=>{ FILES_QUERY=(fileSearch.value||'').trim().toLowerCase(); renderFiles(); });
fileSort.addEventListener('change', ()=>{ FILES_SORT=fileSort.value; renderFiles(); });
async function handleFiles(fileList){
  if(!fileList || !fileList.length) return;
  const fd = new FormData();
  [...fileList].forEach(f=> fd.append('files', f));
  try{
    const r = await fetch('/fichiers/upload', { method:'POST', body:fd, credentials:'same-origin', headers:{ 'Accept':'application/json' } });
    const data = await r.json();
    if(!r.ok) throw new Error(data?.error||'Upload √©chou√©');
    const added = (data.files||[]).map(normalizeFile);
    FILES_CACHE = [...added, ...FILES_CACHE];
    updateFileCounters();
    renderFiles();
  }catch(e){ alert('Upload: '+e.message); }
}
async function refreshFiles(){
  try{ const r=await fetch('/fichiers/list',{credentials:'same-origin'}); if(!r.ok) return; const list=await r.json(); FILES_CACHE = (list||[]).map(normalizeFile); updateFileCounters(); renderFiles(); }catch(_) {}
}
refreshFiles();

/* ====== CHAT (nouveau rendu & reply) ====== */
const chatCard   = document.getElementById('chatCard');
const msgsEl     = document.getElementById('msgs');
const typingEl   = document.getElementById('typing');
const chatTextEl = document.getElementById('chatText');
const chatFormEl = document.getElementById('chatForm');
const presenceEl = document.getElementById('presence');

const replyBar   = document.getElementById('replyBar');
const replyName  = document.getElementById('replyName');
const replySnip  = document.getElementById('replySnippet');
const replyCancel= document.getElementById('replyCancel');

function hideChat(reason){
  if(chatCard) chatCard.style.display = 'none';
  if(reason) console.warn('[chat] d√©sactiv√©:', reason);
}
function esc(s){ return String(s||'').replace(/[&<>"']/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;' }[c])); }
const hhmm = ts => new Date(ts||Date.now()).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
const dayKey = ts => { const d=new Date(ts||Date.now()); return d.getFullYear()+'-'+(d.getMonth()+1)+'-'+d.getDate(); };

let lastDayKey = '';
let REPLY_TARGET = null; // {id, from, text}

function showReplyBar(target){
  REPLY_TARGET = target;
  replyName.textContent = target?.from || '‚Äî';
  replySnip.textContent = (target?.text || '').slice(0, 160);
  replyBar.classList.remove('hidden');
}
function hideReplyBar(){
  REPLY_TARGET = null;
  replyBar.classList.add('hidden');
  replyName.textContent = '‚Äî';
  replySnip.textContent = '‚Äî';
}
replyCancel?.addEventListener('click', hideReplyBar);

function jumpToMessage(id){
  if(!id) return;
  const el = msgsEl.querySelector(`[data-mid="${CSS.escape(id)}"]`);
  if(!el) return;
  el.scrollIntoView({behavior:'smooth', block:'center'});
  el.classList.add('flash');
  setTimeout(()=> el.classList.remove('flash'), 1800);
}

/* Rendu d‚Äôun message (WhatsApp-like) */
function addMsg(m){
  if(!msgsEl) return;
  const ts = m.ts || Date.now();
  const k  = dayKey(ts);
  if(k!==lastDayKey){
    msgsEl.insertAdjacentHTML('beforeend', `<div class="w-day">${new Date(ts).toLocaleDateString()}</div>`);
    lastDayKey = k;
  }

  const me  = (m.from === CONNECTED_USER.nom);
  const ini = (m.from||'?').split(' ').map(x=>x[0]).join('').slice(0,2).toUpperCase();

  const wrap = document.createElement('div');
  wrap.className = 'w-msg ' + (me ? 'mine' : 'theirs');
  wrap.dataset.mid = m.id || m._id || String(ts);

  const fromLine = `<div class="w-from">${esc(me ? 'Moi' : (m.from||'‚Äî'))}</div>`;
  const q = (m.replyTo && (m.replyTo.text || m.replyTo.from)) ? `
    <div class="w-quote" data-ref="${esc(m.replyTo.id||'')}" title="Afficher le message cit√©">
      <div class="q-name">${esc(m.replyTo.from || '‚Äî')}</div>
      <div class="q-text">${esc((m.replyTo.text||'').slice(0,160))}</div>
    </div>` : '';

  wrap.innerHTML = `
    ${me ? '' : `<div class="w-avatar-sm">${ini}</div>`}
    <div class="w-bubble">
      ${fromLine}
      ${q}
      <div class="w-text">${esc(m.text||'')}</div>
      <div class="w-meta"><span class="w-time">${hhmm(ts)}</span>${me?'<span class="w-ticks">‚úì‚úì</span>':''}</div>
    </div>`;
  msgsEl.appendChild(wrap);
  msgsEl.scrollTop = msgsEl.scrollHeight;
}

/* === Socket.io === */
let socket;
try{
  socket = io({
    path: '/socket.io',
    transports: ['websocket','polling'],
    auth: { user: {
      nom: CONNECTED_USER.nom, etab: CONNECTED_USER.etab,
      role: CONNECTED_USER.role, inspection: CONNECTED_USER.inspection
    } }
  });
  window.socket = socket;
}catch(e){ hideChat(e); }

if(!socket){ hideChat('io indisponible'); }
else{
  socket.on('connect', ()=>{
    presenceEl && (presenceEl.textContent = 'Connect√©s : ‚Äî');
    socket.emit('chat:join', { inspection: CONNECTED_USER.inspection, etab: CONNECTED_USER.etab });
  });
  socket.on('disconnect', (reason)=>{ presenceEl && (presenceEl.textContent = 'Hors ligne'); console.warn('[chat] disconnect:', reason); });
  socket.on('connect_error', (err)=>{ console.warn('[chat] connect_error:', err?.message||err); if(chatTextEl) chatTextEl.disabled = true; });

  socket.on('chat:history', (list)=>{
    msgsEl.innerHTML=''; lastDayKey='';
    (Array.isArray(list)?list:[]).forEach(addMsg);
  });
  socket.on('chat:new', addMsg);
  socket.on('chat:error', e => alert(e?.error || e?.message || 'Erreur chat'));
  socket.on('presence:update', n => { presenceEl && (presenceEl.textContent = `Connect√©s : ${n}`); });

  // indicateur ‚ÄúX √©crit‚Ä¶‚Äù
  let typingClear;
  socket.on('chat:typing', payload=>{
    if(!typingEl) return;
    const from = payload?.from||'Quelqu‚Äôun';
    const isTyping = !!payload?.typing;
    if(from === CONNECTED_USER.nom) return;
    typingEl.textContent = isTyping ? `${from} est en train d‚Äô√©crire‚Ä¶` : '';
    clearTimeout(typingClear);
    if(isTyping) typingClear = setTimeout(()=> typingEl.textContent='', 1200);
  });

  // rafra√Æchir l'historique si besoin
  document.getElementById('chatRefresh')?.addEventListener('click', ()=>{
    socket?.emit('chat:join', { inspection: CONNECTED_USER.inspection, etab: CONNECTED_USER.etab });
  });

  // ‚Äúje tape‚Ä¶‚Äù
  if(chatTextEl){
    let typingTimer;
    chatTextEl.addEventListener('input', ()=>{
      socket.emit('chat:typing', { typing:true, from: CONNECTED_USER.nom });
      clearTimeout(typingTimer);
      typingTimer = setTimeout(()=> socket.emit('chat:typing', { typing:false, from: CONNECTED_USER.nom }), 800);
    });
  }
}

/* === Clicks sur messages : armer la r√©ponse / ouvrir la citation === */
msgsEl?.addEventListener('click', (e)=>{
  const msg = e.target.closest('.w-msg');
  if(!msg) return;
  const quote = e.target.closest('.w-quote');
  if(quote && quote.dataset.ref){ jumpToMessage(quote.dataset.ref); return; }

  const id   = msg.dataset.mid || '';
  const from = msg.querySelector('.w-from')?.textContent?.replace(/^Moi$/,'Vous') || '‚Äî';
  const text = msg.querySelector('.w-text')?.textContent || '';
  showReplyBar({ id, from, text });
  chatTextEl?.focus();
});

/* === Envoi : inclure replyTo si pr√©sent (Entr√©e pour envoyer) === */
chatTextEl?.addEventListener('keydown', (e)=>{
  if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); chatFormEl?.requestSubmit(); }
});
chatFormEl?.addEventListener('submit', e=>{
  e.preventDefault();
  const text = (chatTextEl?.value||'').trim();
  if(!text) return;
  const payload = { text, ts: Date.now() };
  if(REPLY_TARGET){
    payload.replyTo = {
      id  : REPLY_TARGET.id || '',
      from: REPLY_TARGET.from || '',
      text: REPLY_TARGET.text || ''
    };
  }
  socket?.emit('chat:send', payload);
  chatTextEl.value='';
  hideReplyBar();
});

/* petits plus input */
document.getElementById('emojiBtn')?.addEventListener('click', ()=>{
  chatTextEl.value += (chatTextEl.value ? ' ' : '') + 'üôÇ';
  chatTextEl.focus();
});
document.getElementById('attachBtn')?.addEventListener('click', ()=>{
  document.getElementById('chatFile')?.click();
});

/* si le serveur notifie des changements de fichiers */
if(socket) socket.on('files:changed', ()=> { try{ refreshFiles(); }catch(_){} });


/******************** PARAM√àTRES (modale) ********************/
const modal    = document.getElementById('settingsModal');
const btnOpen  = document.getElementById('btnOpenSettings');
const btnClose = document.getElementById('btnCloseSettings'); // √©tait manquant
const btnClose2= document.getElementById('btnClose2');        // √©tait manquant
const btnSaveAll = document.getElementById('btnSaveAll');

if (btnOpen)   btnOpen.addEventListener('click', (e)=>{ e.preventDefault(); openSettings(); });
if (btnClose)  btnClose.addEventListener('click', ()=> closeModal(modal));
if (btnClose2) btnClose2.addEventListener('click', ()=> closeModal(modal));
if (btnSaveAll)btnSaveAll.addEventListener('click', saveAllAndClose);

/* --- Colonne gauche (effectifs / staff) --- */
const yearInput = document.getElementById('yearInput');
const effTbody = document.getElementById('effTbody');
const staffTbody= document.getElementById('staffTbody');
document.getElementById('btnAddEff').addEventListener('click', ()=> addEffRow({classe:'',filles:0,garcons:0}));
document.getElementById('btnAddStaff').addEventListener('click', ()=> addStaffRow({nom:'',grade:'',matiere:'',statut:'',obs:''}));
document.getElementById('btnLoadClassesFromPreset').addEventListener('click', loadClassesPreset);
document.getElementById('btnExportStaff').addEventListener('click', exportStaffCSV);
document.getElementById('btnPrintStaff').addEventListener('click', printStaff);

/* --- Colonne droite (baselines) --- */
const bCycle = document.getElementById('bCycle');
const bSpec = document.getElementById('bSpec');
const baselineClassList = document.getElementById('classList'); /* renomm√© */
const currentClassChip = document.getElementById('currentClassChip');
const bTbody = document.getElementById('bTbody');
document.getElementById('btnLoadBaselines').addEventListener('click', ()=> loadBaselines(false));
document.getElementById('btnLoadBaselineDefaults').addEventListener('click', ()=> loadBaselines(true));
document.getElementById('btnImportExpected').addEventListener('click', importExpectedToCurrent);
document.getElementById('btnAddDisc').addEventListener('click', ()=> addDiscRowToCurrent({discipline:'',heuresDues:0,leconsPrevues:0,leconsDigPrevues:0,tpPrevus:0,tpDigPrevus:0,enseignantsPoste:0}));
document.getElementById('btnAddClass').addEventListener('click', ()=> addBaselineClass(prompt('Nom de la classe :')||''));
document.getElementById('btnRenameClass').addEventListener('click', renameBaselineClass);
document.getElementById('btnDeleteClass').addEventListener('click', deleteBaselineClass);
document.getElementById('btnSyncClasses').addEventListener('click', syncClassesFromEffectifs);

/* --- Explorateur personnel (boutons d'acc√®s) --- */
document.getElementById('btnOpenStaffExplorer')?.addEventListener('click', ()=> openStaffExplorer());
document.getElementById('btnOpenStaffExplorer2')?.addEventListener('click', ()=> openStaffExplorer());

/* --- Etat local des baselines --- */
const BSTATE = new Map();
let CURRENT_CLASS = '';
let CURRENT_ALLOWED_CLASSES = [];

function ensureBaselineForBase(labelOrBase){
  const sl  = splitClassLabel(labelOrBase);
  const key = makeClassLabel(sl.base, sl.division || 1);
  if (!key) return;

  const kBase = sl.base;
  const k1    = makeClassLabel(sl.base, 1);

  // Migrer "base" -> "(1)" si n√©cessaire
  if (sl.division === 1 && BSTATE.has(kBase) && !BSTATE.has(k1)) {
    BSTATE.set(k1, (BSTATE.get(kBase) || []).map(x => ({...x})));
    BSTATE.delete(kBase);
  }

  // Cr√©er en clonant depuis "(1)" ou "base"
  if (!BSTATE.has(key)) {
    const proto = BSTATE.get(k1) || BSTATE.get(kBase) || [];
    BSTATE.set(key, proto.map(x => ({...x})));
    if (!CURRENT_CLASS) CURRENT_CLASS = key;
    renderClassList();
    renderDiscTable();
  }
}


function autoSyncBaselinesFromEffectifs(){
  if(!effTbody) return;

  // Toutes les divisions visibles √† gauche, ex: "1√®re Ann√©e DECO (1)", "(2)", ‚Ä¶ 
  const labels = [...effTbody.querySelectorAll('tr')]
    .map(labelFromEffRow)
    .filter(Boolean);

  const unique = [...new Set(labels)];
  const bases  = new Set(unique.map(l => splitClassLabel(l).base));

  let changed = false;

  // 1) Migrer "base" -> "(1)" si l‚Äôon a d√©sormais des divisions
  for (const base of bases) {
    const k1 = makeClassLabel(base, 1);
    if (BSTATE.has(base)) {
      if (!BSTATE.has(k1)) {
        BSTATE.set(k1, (BSTATE.get(base) || []).map(x => ({...x})));
      }
      BSTATE.delete(base);
      changed = true;
    }
  }

  // 2) Garantir une baseline pour chaque division (clone depuis "(1)" si possible)
  unique.forEach(l => {
    if (!BSTATE.has(l)) {
      const { base } = splitClassLabel(l);
      const proto = BSTATE.get(makeClassLabel(base, 1)) || [];
      BSTATE.set(l, proto.map(x => ({...x})));
      changed = true;
    }
  });

  // 3) Nettoyer les orphelines (non visibles √† gauche)
  for (const k of [...BSTATE.keys()]) {
    if (!unique.includes(k)) {
      BSTATE.delete(k);
      changed = true;
    }
  }

  // 4) S√©lection par d√©faut
  if (!CURRENT_CLASS && unique.length) {
    CURRENT_CLASS = unique[0];
    changed = true;
  }

  if (changed) {
    renderClassList();
    renderDiscTable();
  }
}


function mapBaselineRow(r){
  return {
    discipline: r.discipline || '',
    heuresDues: +r.heuresDues || 0,
    leconsPrevues: +r.leconsPrevues || 0,
    leconsDigPrevues: +r.leconsDigPrevues || 0,
    tpPrevus: +r.tpPrevus || 0,
    tpDigPrevus: +r.tpDigPrevus || 0,
    enseignantsPoste: +r.enseignantsPoste || 0
  };
}

async function loadRowsFromSources(base){
  const cyc  = bCycle.value || selCycle.value;
  const spec = bSpec.value  || selSpec.value;
  const annee = (yearInput?.value || '').trim() || getSchoolYear();
  if(!cyc || !spec) return [];

  // 1) baselines enregistr√©es
  try{
    const r = await getJSON(`/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const list = (r||[]).filter(x => String(x.classe||'').trim() === base);
    if(list.length) return list.map(mapBaselineRow);
  }catch(_){}

  // 2) defaults
  try{
    const r = await getJSON(`/api/settings/baselines/defaults?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const list = (r||[]).filter(x => String(x.classe||'').trim() === base);
    if(list.length) return list.map(mapBaselineRow);
  }catch(_){}

  // 3) r√©f√©rentiel ‚Üí tout √† 0
  try{
    const ref = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}&actif=true`);
    const expected = [...new Set(ref.map(r => String(r.nom||'').trim()).filter(Boolean))];
    if(expected.length){
      return expected.map(n => ({
        discipline:n, heuresDues:0, leconsPrevues:0, leconsDigPrevues:0,
        tpPrevus:0, tpDigPrevus:0, enseignantsPoste:0
      }));
    }
  }catch(_){}
  return [];
}

async function ensureRowsFor(classLabel){
  const cur = BSTATE.get(classLabel) || [];
  if(cur.length) return;

  const { base, division } = splitClassLabel(classLabel);
  if(division > 1){
    const proto = BSTATE.get(makeClassLabel(base,1));
    if(proto && proto.length){ BSTATE.set(classLabel, proto.map(x=>({...x}))); return; }
  }
  const rows = await loadRowsFromSources(base);
  BSTATE.set(classLabel, rows);
}



function renderClassList(){
  baselineClassList.innerHTML = '';
  const classes = [...BSTATE.keys()].sort((a,b)=> a.localeCompare(b));

  classes.forEach(name=>{
    const div = document.createElement('div');
    div.className = 'classItem' + (name===CURRENT_CLASS ? ' active' : '');
    div.textContent = name || '‚Äî';
    div.addEventListener('click', async ()=>{
      CURRENT_CLASS = name;
      renderClassList();                  // met √† jour l‚Äôitem actif
      await ensureRowsFor(CURRENT_CLASS); // ‚¨ÖÔ∏è charge les lignes si vide
      renderDiscTable();                  // puis affiche dans le tableau de droite
    });
    baselineClassList.appendChild(div);
  });

  if(!CURRENT_CLASS && classes.length){ CURRENT_CLASS = classes[0]; }
  currentClassChip.textContent = CURRENT_CLASS || '‚Äî';
}

function renderDiscTable(){
  const rows = BSTATE.get(CURRENT_CLASS)||[];
  bTbody.innerHTML='';
  if(!CURRENT_CLASS){ bTbody.innerHTML='<tr><td colspan="8" class="subtle">Aucune classe s√©lectionn√©e.</td></tr>'; return; }
  rows.forEach((r,idx)=> bTbody.insertAdjacentHTML('beforeend', discRowHTML(r, idx)));
  attachRowEvents();
}
function discRowHTML(r,idx){
  return `
  <tr data-idx="${idx}">
    <td><input type="text" value="${r.discipline||''}"></td>
    <td><input type="number" min="0" value="${+r.heuresDues||0}"></td>
    <td><input type="number" min="0" value="${+r.leconsPrevues||0}"></td>
    <td><input type="number" min="0" value="${+r.leconsDigPrevues||0}"></td>
    <td><input type="number" min="0" value="${+r.tpPrevus||0}"></td>
    <td><input type="number" min="0" value="${+r.tpDigPrevus||0}"></td>
    <td><input type="number" min="0" value="${+r.enseignantsPoste||0}"></td>
    <td><button class="btn">üóë</button></td>
  </tr>`;
}
function attachRowEvents(){
  bTbody.querySelectorAll('tr').forEach(tr=>{
    tr.querySelector('button').addEventListener('click', ()=>{ const idx=+tr.dataset.idx; const arr=BSTATE.get(CURRENT_CLASS)||[]; arr.splice(idx,1); BSTATE.set(CURRENT_CLASS,arr); renderDiscTable(); });
    tr.querySelectorAll('input').forEach((inp,pi)=>{
      inp.addEventListener('input', ()=>{ const idx=+tr.dataset.idx; const arr=BSTATE.get(CURRENT_CLASS)||[]; const item={...arr[idx]}; if(pi===0) item.discipline=inp.value.trim(); if(pi===1) item.heuresDues=+inp.value||0; if(pi===2) item.leconsPrevues=+inp.value||0; if(pi===3) item.leconsDigPrevues=+inp.value||0; if(pi===4) item.tpPrevus=+inp.value||0; if(pi===5) item.tpDigPrevus=+inp.value||0; if(pi===6) item.enseignantsPoste=+inp.value||0; arr[idx]=item; BSTATE.set(CURRENT_CLASS,arr); });
    });
  });
}
function addDiscRowToCurrent(r){ if(!CURRENT_CLASS){ alert('Ajoutez / s√©lectionnez d‚Äôabord une classe.'); return; } const arr=BSTATE.get(CURRENT_CLASS)||[]; arr.push({...r}); BSTATE.set(CURRENT_CLASS,arr); renderDiscTable(); }
function addBaselineClass(name){ name=String(name||'').trim(); if(!name) return; if(BSTATE.has(name)) return alert('Classe d√©j√† pr√©sente.'); BSTATE.set(name,[]); CURRENT_CLASS=name; renderClassList(); renderDiscTable(); }
function renameBaselineClass(){ if(!CURRENT_CLASS) return; const n=prompt('Nouveau nom :', CURRENT_CLASS); if(!n) return; const rows=BSTATE.get(CURRENT_CLASS); BSTATE.delete(CURRENT_CLASS); BSTATE.set(n, rows); CURRENT_CLASS=n; renderClassList(); renderDiscTable(); }
function deleteBaselineClass(){ if(!CURRENT_CLASS) return; if(!confirm(`Supprimer ${CURRENT_CLASS} ?`)) return; BSTATE.delete(CURRENT_CLASS); CURRENT_CLASS=''; renderClassList(); renderDiscTable(); }
async function importExpectedToCurrent(){
  if(!CURRENT_CLASS) return alert('S√©lectionnez une classe.');
  const cyc=bCycle.value||selCycle.value, spec=bSpec.value||selSpec.value;
  if(!cyc||!spec) return alert('Choisissez cycle et sp√©cialit√©.');
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}&actif=true`);
    const expected = [...new Set(rows.map(r=>r.nom))];
    const cur = new Set((BSTATE.get(CURRENT_CLASS)||[]).map(r=> (r.discipline||'').trim().toLowerCase()));
    expected.filter(n=>!cur.has(n.trim().toLowerCase()))
      .forEach(n=> addDiscRowToCurrent({discipline:n,heuresDues:0,leconsPrevues:0,leconsDigPrevues:0,tpPrevus:0,tpDigPrevus:0,enseignantsPoste:0}));
  }catch(_){ alert('Impossible de charger le r√©f√©rentiel.'); }
}
function syncClassesFromEffectifs(){
  const classes = [...effTbody.querySelectorAll('tr')]
    .map(labelFromEffRow)
    .filter(Boolean);

  if(!classes.length) return alert('Aucune classe dans les effectifs.');

  // nettoyer
  for(const k of [...BSTATE.keys()]) if(!classes.includes(k)) BSTATE.delete(k);
  // compl√©ter
  classes.forEach(c => { if(!BSTATE.has(c)) BSTATE.set(c, []); });

  if(!CURRENT_CLASS) CURRENT_CLASS = classes[0];
  renderClassList(); renderDiscTable();
}


async function fillSpecsForCycle(cycle){
  bSpec.innerHTML = '<option value="">‚Äî</option>';
  if(!cycle) return;
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cycle)}&actif=true`);
    const specs = [...new Set((rows||[]).map(r=>r.specialite))].sort();
    specs.forEach(s=> bSpec.insertAdjacentHTML('beforeend', `<option value="${s}">${s}</option>`));
  }catch(_){/* ignore */}
}

bCycle.addEventListener('change', async ()=>{ await fillSpecsForCycle(bCycle.value); BSTATE.clear(); CURRENT_CLASS=''; renderClassList(); renderDiscTable(); await autoLoadBaselines(); await refreshEffectifsForSelection(); });
bSpec.addEventListener('change', async ()=>{ BSTATE.clear(); CURRENT_CLASS=''; renderClassList(); renderDiscTable(); await autoLoadBaselines(); await refreshEffectifsForSelection(); });

async function loadBaselines(forceDefaults){
  const annee=(yearInput.value||'').trim()||getSchoolYear();
  const cyc = bCycle.value || selCycle.value;
  const spec = bSpec.value || selSpec.value;
  if(!cyc || !spec){ alert('Choisir un cycle et une sp√©cialit√©.'); return; }
  try{
    const url = forceDefaults ? `/api/settings/baselines/defaults?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}` : `/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`;
    const rows = await getJSON(url);
    BSTATE.clear();
    (rows||[]).forEach(r=>{
      const c=String(r.classe||'').trim(); if(!c) return;
      const list = BSTATE.get(c)||[];
      list.push({ discipline: r.discipline||'', heuresDues:+r.heuresDues||0, leconsPrevues:+r.leconsPrevues||0, leconsDigPrevues:+r.leconsDigPrevues||0, tpPrevus:+r.tpPrevus||0, tpDigPrevus:+r.tpDigPrevus||0, enseignantsPoste:+r.enseignantsPoste||0 });
      BSTATE.set(c, list);
    });
    if(!BSTATE.size && forceDefaults===false){ await loadBaselines(true); return; }
    CURRENT_CLASS = [...BSTATE.keys()][0] || '';
    renderClassList(); renderDiscTable();
  }catch(e){ alert('Impossible de charger les baselines.'); }
}
async function autoLoadBaselines(){ if((bCycle.value||'') && (bSpec.value||'')) await loadBaselines(false); }
function collectBaselinesList(){
  const out=[]; for (const [classe, list] of BSTATE.entries()){ (list||[]).forEach(r=>{ if(!classe || !String(r.discipline||'').trim()) return; out.push({ classe, discipline: r.discipline, heuresDues:+r.heuresDues||0, leconsPrevues:+r.leconsPrevues||0, leconsDigPrevues:+r.leconsDigPrevues||0, tpPrevus:+r.tpPrevus||0, tpDigPrevus:+r.tpDigPrevus||0, enseignantsPoste:+r.enseignantsPoste||0 }); }); } return out;
}

/* === Effectifs/Staff helpers ‚Äî champs lisibles === */
function normalizeBase(s){ return splitClassLabel(String(s||'').trim()).base; }
function rowsForBase(base){
  base = normalizeBase(base);
  return [...effTbody.querySelectorAll('tr')]
    .filter(tr => normalizeBase(tr.querySelector('td input')?.value||'') === base);
}

function labelFromEffRow(tr){
  const base = normalizeBase(tr.querySelector('td input')?.value || '');
  const div  = Math.max(1, +tr.querySelector('.inp-div')?.value || 1);
  return makeClassLabel(base, div);           // ex: "1√®re ann√©e DECO (2)"
}

function nextDivisionIndexForBase(base){
  const rows = rowsForBase(base);
  const max = rows.reduce((m,tr)=> Math.max(m, +tr.querySelector('.inp-div')?.value||0), 0);
  return (max||0) + 1;
}
function renumberBaseGroup(base){
  rowsForBase(base).forEach((tr,i)=>{
    const divInp = tr.querySelector('.inp-div');
    if(divInp) divInp.value = i+1;
  });
}
/* === Ajuster le nombre de lignes (Div.) pour une classe (base) === */
function setDivisionCountForBase(base, nWanted){
  base = normalizeBase(base);
  nWanted = Math.max(1, +nWanted||1);
  let rows = rowsForBase(base);

  if(rows.length < nWanted){
  for(let i=rows.length; i<nWanted; i++){
    const last = rows[rows.length-1] || null;
    const newTr = addEffRow({ classe: base, divisionIndex: i+1, filles:0, garcons:0 });
    if(last) effTbody.insertBefore(newTr, last.nextSibling);
    rows = rowsForBase(base);
  }

  }else if(rows.length > nWanted){
    rows.slice(nWanted).forEach(tr => tr.remove());
  }
  renumberBaseGroup(base);
  autoSyncBaselinesFromEffectifs();
  ensureBaselineForBase(makeClassLabel(base, 1));
}

function addEffRow(e){
  const base = normalizeBase(e.classe||'');
  const div  = Math.max(1, Number(e.divisionIndex||splitClassLabel(e.classe||'').division||1));
  const filles = +e.filles||0, garcons = +e.garcons||0;

  const tr = document.createElement('tr');
  tr.innerHTML = `
    <td><input type="text" placeholder="ex : 1√®re ann√©e DECO" value="${base}"></td>
    <td><input type="number" class="inp-div" min="1" value="${div}" style="width:70px"></td>
    <td><input type="number" min="0" value="${filles}"></td>
    <td><input type="number" min="0" value="${garcons}"></td>
    <td style="display:flex;gap:6px;justify-content:center">
      <button class="btn" type="button" title="Ajouter une division">‚ûï</button>
      <button class="btn" type="button" title="Supprimer">üóë</button>
    </td>`;

  const [inpBase, inpDiv] = tr.querySelectorAll('td input');
  const [btnAdd, btnDel]  = tr.querySelectorAll('button');
  let lastBase = base;

  // ‚ûï ajouter automatiquement la division suivante
btnAdd.addEventListener('click', ()=>{
  const b = normalizeBase(inpBase.value);
  const n = nextDivisionIndexForBase(b);
  addEffRow({ classe: b, divisionIndex: n, filles:0, garcons:0 });
  renumberBaseGroup(b);
  autoSyncBaselinesFromEffectifs();
});


  // üóë supprimer la ligne & renum√©roter le groupe
  btnDel.addEventListener('click', ()=>{
    const b = normalizeBase(inpBase.value);
    tr.remove();
    renumberBaseGroup(b);
    autoSyncBaselinesFromEffectifs();
  });

  // Changement du libell√© de classe ‚Üí renum√©roter anciens/nouveaux groupes
  inpBase.addEventListener('input', ()=>{
    const newBase = normalizeBase(inpBase.value);
    inpBase.value = newBase; // enl√®ve un √©ventuel "(n)"
    if(newBase !== lastBase){
      renumberBaseGroup(lastBase);
      renumberBaseGroup(newBase);
      lastBase = newBase;
      if((+inpDiv.value||0) < 1) inpDiv.value = nextDivisionIndexForBase(newBase);
    }
    
     autoSyncBaselinesFromEffectifs();
  });
     inpBase.addEventListener('blur', ()=> ensureBaselineForBase(inpBase.value));
  // Saisie manuelle de ‚ÄúDiv.‚Äù : on ajuste le NOMBRE de lignes du groupe
 inpDiv.addEventListener('input', ()=>{
  let v = Math.max(1, +inpDiv.value || 1);
  setDivisionCountForBase(normalizeBase(inpBase.value), v); // ‚úÖ le bon appel
});


  effTbody.appendChild(tr);
  ensureBaselineForBase(makeClassLabel(base, div));
    return tr;
}


function addStaffRow(s){
  const tr=document.createElement('tr');
  tr.innerHTML = `
    <td><input type="text" placeholder="Nom & pr√©nom" value="${s.nom||''}"></td>
    <td><input type="text" placeholder="ex : A3" value="${s.grade||''}"></td>
    <td><input type="text" placeholder="ex : Histoire de l'art" value="${s.matiere||''}"></td>
    <td><input type="text" placeholder="ex : Titulaire" value="${s.statut||''}"></td>
    <td><textarea placeholder="Observation‚Ä¶">${s.obs||''}</textarea></td>
    <td style="display:flex;gap:6px;justify-content:center">
      <button class="btn" type="button" title="Fiche enseignant">üìÑ</button>
      <button class="btn" type="button" title="Supprimer">üóë</button>
    </td>`;
  const [btnFiche, btnDel] = tr.querySelectorAll('button');
  btnDel.addEventListener('click', ()=> tr.remove());
  btnFiche.addEventListener('click', ()=>{
    const t=tr.querySelectorAll('td input, td textarea');
    openStaffSheet({
      nom:t[0].value.trim(), grade:t[1].value.trim(), matiere:t[2].value.trim(), statut:t[3].value.trim(), obs:t[4].value.trim(),
      classes: Array.isArray(s.classes)? [...s.classes]:[], disciplines: Array.isArray(s.disciplines)? [...s.disciplines]:[]
    }, updated=>{
      t[0].value=updated.nom||''; t[1].value=updated.grade||''; t[2].value=updated.matiere||''; t[3].value=updated.statut||''; t[4].value=updated.obs||'';
      if(SETTINGS_CACHE){
        const staff = SETTINGS_CACHE.staff||[];
        const idx = staff.findIndex(p=> (p.nom||'').trim().toLowerCase() === (updated.nom||'').trim().toLowerCase());
        if(idx>=0) staff[idx] = {...staff[idx], ...updated};
      }
    });
  });
  staffTbody.appendChild(tr);
}

async function getDefaultClassesFor(cyc,spec){
  try{ const r = await getJSON(`/api/presets?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`); return r?.classes||[]; }catch(_){ return []; }
}
async function refreshEffectifsForSelection(){
  const cyc=bCycle.value||selCycle.value, spec=bSpec.value||selSpec.value;
  if(!cyc || !spec) return;
  let allowed = [...BSTATE.keys()];
  if(!allowed.length) allowed = await getDefaultClassesFor(cyc, spec);
  CURRENT_ALLOWED_CLASSES = allowed.slice();

  const allEff = SETTINGS_CACHE?.effectifs || [];
  // Regrouper les lignes existantes par base
  const byBase = new Map();
  allEff.forEach(e=>{
    const sl = splitClassLabel(e.classe||'');
    const b  = normalizeBase(sl.base);
    const div= sl.division||1;
    if(!byBase.has(b)) byBase.set(b, []);
    byBase.get(b).push({ divisionIndex: div, filles:+e.filles||0, garcons:+e.garcons||0 });
  });

  effTbody.innerHTML = '';
  // Pour chaque classe autoris√©e : restituer les divisions existantes ou cr√©er la (1)
  allowed.forEach(base=>{
    const rows = (byBase.get(normalizeBase(base)) || []).sort((a,b)=> a.divisionIndex - b.divisionIndex);
    if(rows.length){
      rows.forEach(r=> addEffRow({ classe: base, divisionIndex: r.divisionIndex, filles: r.filles, garcons: r.garcons }));
      renumberBaseGroup(base);
    }else{
      addEffRow({ classe: base, divisionIndex: 1, filles:0, garcons:0 });
    }
  });
  autoSyncBaselinesFromEffectifs();
}

async function loadClassesPreset(){
  const cyc = bCycle.value || selCycle.value;
  const spec = bSpec.value || selSpec.value;
  if(!cyc || !spec){ alert('Choisir un cycle et une sp√©cialit√©.'); return; }
  try{
    const r = await getJSON(`/api/presets?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const classes = r?.classes||[];
    if(!classes.length) return alert('Aucun preset trouv√© pour ce couple.');
    CURRENT_ALLOWED_CLASSES = classes.slice();
    effTbody.innerHTML = '';
    classes.forEach(c=> addEffRow({classe:c, divisionIndex:1, filles:0, garcons:0}));
  }catch(_){ alert('Impossible de charger les classes par d√©faut.'); }
  autoSyncBaselinesFromEffectifs();
}


async function saveAllAndClose(){
  const annee = (yearInput.value||'').trim() || getSchoolYear();

// R√©cup√©rer ce qui est affich√© (par base √ó division)
const displayed = [...effTbody.querySelectorAll('tr')].map(tr=>{
  const t = tr.querySelectorAll('td input');
  const base = normalizeBase(t[0].value.trim());
  const div  = Math.max(1, +t[1].value||1);
  const filles = +t[2].value||0;
  const garcons= +t[3].value||0;
  return { classe: makeClassLabel(base, div), filles, garcons };
}).filter(x=> x.classe);

// Conserver les autres lignes ‚Äúhors couple‚Äù (bases non autoris√©es)
const others = (SETTINGS_CACHE?.effectifs||[]).filter(e=>{
  const b = normalizeBase(e.classe||'');
  return !CURRENT_ALLOWED_CLASSES.map(normalizeBase).includes(b);
});

  const effectifs=[...others, ...displayed];
  const UIstaff=[...staffTbody.querySelectorAll('tr')].map(tr=>{
    const t=tr.querySelectorAll('td input, td textarea'); const nom=t[0].value.trim();
    const base={ nom, grade:t[1].value.trim(), matiere:t[2].value.trim(), statut:t[3].value.trim(), obs:t[4].value.trim() };
    const enrich = (SETTINGS_CACHE?.staff||[]).find(p=> (p.nom||'').trim().toLowerCase()===(nom||'').toLowerCase());
    return enrich ? {...base, classes:enrich.classes||[], disciplines:enrich.disciplines||[]} : base;
  }).filter(x=>x.nom);
  const cyc = bCycle.value || selCycle.value; const spec = bSpec.value || selSpec.value; const list = collectBaselinesList();
  try{
        await postJSON('/api/settings', { annee, effectifs, staff: UIstaff });
    if (cyc && spec) {
      await postJSON('/api/settings/baselines', { annee, cycle: cyc, specialite: spec, list });
    }
    SETTINGS_CACHE = { ...(SETTINGS_CACHE||{}), annee, effectifs, staff: UIstaff };

    await refreshSettingsSidebar();
    applyEffectifCapsAndPrefill();
    alert('Param√®tres enregistr√©s.');
    closeModal(modal);
  }catch(e){ alert('Erreur: '+e.message); }
}

/* Ouvrir la modale & charger les donn√©es */
async function openSettings(){
  openModal(modal);
  yearInput.value = getSchoolYear();
  effTbody.innerHTML=''; staffTbody.innerHTML='';
  BSTATE.clear(); CURRENT_CLASS=''; CURRENT_ALLOWED_CLASSES=[]; renderClassList(); renderDiscTable();

  bCycle.value = selCycle.value || '';
  await fillSpecsForCycle(bCycle.value);
  if (selSpec.value) bSpec.value = selSpec.value;

  try{
    const s = await getJSON(`/api/settings?annee=${encodeURIComponent(yearInput.value)}`);
    SETTINGS_CACHE = s || null;
    (SETTINGS_CACHE?.staff||[]).forEach(addStaffRow);
  }catch(_){ SETTINGS_CACHE=null; }

  await autoLoadBaselines();
  await refreshEffectifsForSelection();
}

/******************** SIDEBAR (stats) ********************/
async function refreshSettingsSidebar(){
  const y = getSchoolYear();
  yearStat.textContent = y;

  try{
    const r = await fetch(`/api/settings?annee=${encodeURIComponent(y)}`, {credentials:'same-origin'});
    if(!r.ok){ throw new Error('no settings'); }
    SETTINGS_CACHE = await r.json();
  }catch(_){
    SETTINGS_CACHE = null;
  }

  const eff   = SETTINGS_CACHE?.effectifs || [];
  const staff = SETTINGS_CACHE?.staff     || [];

  const totEleves = eff.reduce((s,e)=> s + (+e.filles||0) + (+e.garcons||0), 0);
  const nbClasses = new Set(eff.map(x=> splitClassLabel(x.classe||'').base)).size;
  const nbEns     = staff.length;

  effStaffStat.innerHTML = `${nbClasses} classe(s), ${totEleves} √©l√®ve(s), ${nbEns} enseignant(s).`;
  // petit tableau r√©cap
  const grouped = {};
  eff.forEach(e=>{
    const base = splitClassLabel(e.classe||'').base;
    grouped[base] = (grouped[base]||0) + (+e.filles||0) + (+e.garcons||0);
  });
  const rows = Object.entries(grouped).sort((a,b)=>a[0].localeCompare(b[0]))
    .map(([c,n])=>`<tr><td>${c}</td><td style="text-align:right">${n}</td></tr>`).join('');
  effTableWrap.innerHTML = `<table class="tbl-mini" style="table-layout:fixed"><colgroup><col><col style="width:90px"></colgroup><thead><tr><th>Classe</th><th>Total</th></tr></thead><tbody>${rows||'<tr><td colspan="2" class="subtle">‚Äî</td></tr>'}</tbody></table>`;
  effStaffDetails.classList.remove('hidden');
}

/******************** CHARGEMENT DYNAMIQUE (collecte) ********************/
selCycle.addEventListener('change', async ()=>{
  formulaires.innerHTML='';
  cycleTotalBloc.classList.add('hidden');
  contEval.classList.add('hidden');
  selSpec.innerHTML='<option value="">-- Choisir --</option>';

  const cyc = selCycle.value;
  if(!cyc){ contSpec.classList.add('hidden'); updateSummary(); return; }
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&actif=true`);
    const specs = [...new Set((rows||[]).map(r=>r.specialite))].sort();
    specs.forEach(s=> selSpec.insertAdjacentHTML('beforeend', `<option value="${s}">${s}</option>`));
    contSpec.classList.toggle('hidden', specs.length===0);
  }catch(_){ contSpec.classList.add('hidden'); }
  updateSummary();
});

selSpec.addEventListener('change', async ()=>{
  formulaires.innerHTML='';
  const spec=selSpec.value, cyc=selCycle.value;
  if(!spec){ contEval.classList.add('hidden'); cycleTotalBloc.classList.add('hidden'); updateSummary(); return; }
  contEval.classList.remove('hidden');
  await buildCollecteFor(cyc, spec);
  await refreshEffectifsForSelection();
});

document.getElementById('evaluation').addEventListener('change', updateSummary);

btnPrefill.addEventListener('click', async ()=>{
  const evalNum = +document.getElementById('evaluation').value;
  if(!selCycle.value || !selSpec.value || !evalNum) return alert('Choisir cycle, sp√©cialit√© et √©valuation');

  try{
    const annee = getSchoolYear();
    const rows = await getJSON(`/collecte/prefill?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(selCycle.value)}&specialite=${encodeURIComponent(selSpec.value)}&evaluation=${evalNum}`);
    const byKey = new Map((rows||[]).map(r=>[
      `${String(r.classe||'').trim().toLowerCase()}||${String(r.discipline||'').trim().toLowerCase()}`, r
    ]));

    document.querySelectorAll('.classeBloc').forEach(bloc=>{
      const cls = (bloc.querySelector('h2')?.textContent||'').trim().toLowerCase();
      bloc.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr=>{
        const disc = tr.cells[0].textContent.trim().toLowerCase();
        const src = byKey.get(`${cls}||${disc}`);
        if(!src) return;
        const set = (sel,val)=>{ const el=tr.querySelector(sel); if(el) el.value = +val||0; };
        set('.val2',  src.hF);   set('.val5',  src.lf);
        set('.val8',  src.ldf);  set('.val11', src.tf);
        set('.val14', src.tdf);  set('.val16', src.comp);
        set('.val17', src.m10);  set('.val20', src.effPos);
      });
    });
    recalcAll();
  }catch(e){ alert('Pr√©remplissage: '+e.message); }
});


async function updateSummary(){
  const spec=selSpec.value||'‚Äî';
  const n=document.querySelectorAll('.classeBloc').length;
  const ev=document.getElementById('evaluation').value||'‚Äî';
  sumSpec.textContent=spec;
  sumEval.textContent=ev;
  sumClasses.textContent=String(n);
  if(n>0){
    badgeClasses.textContent=`${n} ${n>1?'classes':'classe'}`;
    badgeClasses.classList.remove('hidden');
  }else{
    badgeClasses.classList.add('hidden');
  }
}

/******************** Bootstrap ********************/
(async function bootstrap(){
  await refreshSettingsSidebar();
  try{
    const y=getSchoolYear();
    const r=await fetch(`/api/settings?annee=${encodeURIComponent(y)}`, {credentials:'same-origin'});
    if(r.status===404){ document.getElementById('btnOpenSettings')?.click(); }
    else if(r.ok){
      const js=await r.json();
      const noEff=(js.effectifs||[]).length===0, noStaff=(js.staff||[]).length===0;
      if(noEff && noStaff) document.getElementById('btnOpenSettings')?.click();
    }
  }catch(_){}
})();

/******************** IMPRESSION & EXPORT ‚Äî COLLECTE ********************/
function cloneTableWithoutInputs(tbl){
  const c = tbl.cloneNode(true);
  c.querySelectorAll('input').forEach(inp=>{
    const td = inp.parentElement; const val = (inp.value||'0');
    td.textContent = val;
  });
  return c;
}
function printCollecte(){
  if(!document.querySelector('.classeBloc')) return alert('Aucune classe √† imprimer.');
  const w = window.open('', '_blank');
  const title = `Collecte ‚Äì ${selCycle.value||''} ${selSpec.value||''} ‚Äî √âval. ${document.getElementById('evaluation').value||'‚Äî'} ‚Äî ${((CONNECTED_USER.inspection||'')||'').toUpperCase()}`;
  const meta = `${CONNECTED_USER.etab} ‚Ä¢ ${CONNECTED_USER.nom} ‚Ä¢ ${new Date().toLocaleString()} ‚Ä¢ Inspection ${CONNECTED_USER.inspection.toUpperCase()}`;
  const style = `<style>*{box-sizing:border-box;font-family:Arial,Helvetica,sans-serif} h1{margin:0 0 6px;font-size:18px} h2{margin:10px 0 4px;font-size:16px} .muted{color:#6b7280;font-size:12px;margin-bottom:6px} table{width:100%;border-collapse:collapse;font-size:11px;margin:8px 0} th,td{border:1px solid #cfd4da;padding:4px 6px;text-align:center;vertical-align:middle} th{background:#eef1f4} .page-break{page-break-before:always} .header{display:flex;justify-content:space-between;align-items:center} .small{font-size:11px}</style>`;
  w.document.write(`<html><head><title>${title}</title>${style}</head><body>`);
  w.document.write(`<div class="header"><div><h1>${title}</h1><div class="muted">${meta}</div></div><div class="small">Cycle: <b>${selCycle.value||'‚Äî'}</b><br>Sp√©cialit√©: <b>${selSpec.value||'‚Äî'}</b></div></div>`);
  if(cycleTotalTable && cycleTotalTable.querySelector('tbody')){
    w.document.write('<h2>Total / moyenne du cycle</h2>');
    w.document.body.appendChild(cloneTableWithoutInputs(cycleTotalTable));
  }
  document.querySelectorAll('.classeBloc').forEach((bloc, idx)=>{
    const h = bloc.querySelector('h2')?.textContent||'‚Äî';
    w.document.write(`<h2 class="${idx? 'page-break':''}">${h}</h2>`);
    const t = bloc.querySelector('table');
    w.document.body.appendChild(cloneTableWithoutInputs(t));
  });
  w.document.write('</body></html>'); w.document.close(); w.focus(); w.print();
}

/******************** EXPLORATEUR PERSONNEL ********************/
const staffExplorerModal = document.getElementById('staffExplorerModal');
const staffExplorerTbody = document.getElementById('staffExplorerTbody');
const staffSearch = document.getElementById('staffSearch');
document.getElementById('btnCloseStaffExplorer')?.addEventListener('click', ()=> staffExplorerModal.classList.remove('open'));
document.getElementById('btnCloseStaffExplorer2')?.addEventListener('click', ()=> staffExplorerModal.classList.remove('open'));

function openStaffExplorer(){
  (async()=>{
    if(!SETTINGS_CACHE){
      try{
        const y=getSchoolYear();
        const s=await getJSON(`/api/settings?annee=${encodeURIComponent(y)}`);
        SETTINGS_CACHE=s;
      }catch(_){}
    }
    openModal(staffExplorerModal);
    renderStaffExplorerTable();
  })();
}

staffSearch?.addEventListener('input', ()=> renderStaffExplorerTable());

function renderStaffExplorerTable(){
  const q=(staffSearch.value||'').trim().toLowerCase();
  const list = (SETTINGS_CACHE?.staff||[]).slice().sort((a,b)=> (a.nom||'').localeCompare(b.nom||''));
  staffExplorerTbody.innerHTML='';
  list.forEach(p=>{
    const classes = (p.classes||[]).filter(Boolean);
    const discs = (p.disciplines||[]).filter(Boolean);
    const hay = [p.nom,p.grade,p.matiere,p.statut,(p.obs||''),...classes,...discs].join(' ').toLowerCase();
    if(q && !hay.includes(q)) return;

    const tdClasses = classes.length? classes.map(c=> `<span class="pill">${c}</span>`).join(' ') : '<span class="muted">‚Äî</span>';
    const tdDiscs = discs.length? discs.map(d=> `<span class="pill">${d}</span>`).join(' ') : '<span class="muted">‚Äî</span>';

    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${p.nom||'‚Äî'}</td>
      <td>${p.grade||'‚Äî'}</td>
      <td>${p.matiere||'‚Äî'}</td>
      <td>${p.statut||'‚Äî'}</td>
      <td>${tdClasses}</td>
      <td>${tdDiscs}</td>
      <td>${p.obs?esc(String(p.obs)):'‚Äî'}</td>
      <td><button class="btn" type="button">üìÑ Fiche</button></td>`;
    tr.querySelector('button').addEventListener('click', ()=> openStaffSheet(p, updated=>{
      const S = SETTINGS_CACHE?.staff||[];
      const idx = S.findIndex(x=> (x.nom||'').trim().toLowerCase()===(updated.nom||'').trim().toLowerCase());
      if(idx>=0) S[idx] = {...S[idx], ...updated}; else S.push(updated);
      renderStaffExplorerTable();
    }));
    staffExplorerTbody.appendChild(tr);
  });
}

/******************** FICHE ENSEIGNANT ********************/
const staffSheetModal = document.getElementById('staffSheetModal');
const btnCloseStaffSheet = document.getElementById('btnCloseStaffSheet');
const btnStaffSheetCancel = document.getElementById('btnStaffSheetCancel');
const btnStaffSheetSave = document.getElementById('btnStaffSheetSave');
const ssNom = document.getElementById('ssNom');
const ssGrade = document.getElementById('ssGrade');
const ssMatiere = document.getElementById('ssMatiere');
const ssStatut = document.getElementById('ssStatut');
const ssObs = document.getElementById('ssObs');
const ssClasses = document.getElementById('ssClasses');
const ssDisciplines = document.getElementById('ssDisciplines');

let STAFF_SHEET_CURRENT = null;
let STAFF_SHEET_CALLBACK = null;

btnCloseStaffSheet.addEventListener('click', ()=> closeModal(staffSheetModal));
btnStaffSheetCancel.addEventListener('click', ()=> closeModal(staffSheetModal));
btnStaffSheetSave.addEventListener('click', ()=>{
  if(!STAFF_SHEET_CURRENT) return;
  const updated = {
    nom: ssNom.value.trim(),
    grade: ssGrade.value.trim(),
    matiere: ssMatiere.value.trim(),
    statut: ssStatut.value.trim(),
    obs: ssObs.value.trim(),
    classes: [...ssClasses.querySelectorAll('input[type=checkbox]:checked')].map(i=> i.value),
    disciplines: [...ssDisciplines.querySelectorAll('input[type=checkbox]:checked')].map(i=> i.value)
  };
  if(SETTINGS_CACHE){
    const S=SETTINGS_CACHE.staff||[];
    const idx=S.findIndex(p=> (p.nom||'').trim().toLowerCase()===(STAFF_SHEET_CURRENT.nom||'').trim().toLowerCase());
    if(idx>=0) S[idx]={...S[idx], ...updated}; else S.push(updated);
    SETTINGS_CACHE.staff=S;
  }
  if(typeof STAFF_SHEET_CALLBACK==='function') STAFF_SHEET_CALLBACK(updated);
  staffSheetModal.classList.remove('open');
});

function makeCheckboxPill(val, selected){
  const id = 'x_'+Math.random().toString(36).slice(2);
  return `<label for="${id}" class="pill" title="${val}">
    <input id="${id}" type="checkbox" value="${val}" ${selected?'checked':''}>
    <span>${val}</span>
  </label>`;
}

async function choicesForDisciplines(){
  const cyc = (bCycle.value || selCycle.value || '').trim();
  const spec= (bSpec.value  || selSpec.value  || '').trim();
  if(!cyc || !spec) return [];
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}&actif=true`);
    return [...new Set(rows.map(r=> String(r.nom||'').trim()).filter(Boolean))].sort();
  }catch(_){ return []; }
}

function choicesForClasses(){
  const fromBState = [...BSTATE.keys()];
  const fromEff = (SETTINGS_CACHE?.effectifs||[]).map(e=> String(e.classe||'').trim()).filter(Boolean);
  return [...new Set([...fromBState, ...fromEff])].sort((a,b)=> a.localeCompare(b));
}


function fillCheckboxGroup(containerEl, values, selected){
  containerEl.innerHTML = values.map(v => makeCheckboxPill(v, selected.includes(v))).join('');
}

function openStaffSheet(person, onSave){
  (async()=>{
    STAFF_SHEET_CURRENT  = {...person};
    STAFF_SHEET_CALLBACK = onSave;

    ssNom.value    = person.nom||'';
    ssGrade.value  = person.grade||'';
    ssMatiere.value= person.matiere||'';
    ssStatut.value = person.statut||'';
    ssObs.value    = person.obs||'';

    const classes = choicesForClasses();
    const discs   = await choicesForDisciplines();

    fillCheckboxGroup(ssClasses, classes, (person.classes||[]));
    fillCheckboxGroup(ssDisciplines, discs, (person.disciplines||[]));

    // ouvre la modale (garde ta logique actuelle si tu pr√©f√®res)
    document.getElementById('staffSheetModal').classList.add('open');
    document.getElementById('staffSheetModal').setAttribute('aria-hidden','false');
  })();
}


/******************** Impression & Export du personnel ********************/
function staffRowsForExport(){
  const staff = (SETTINGS_CACHE?.staff||[]).slice().sort((a,b)=> (a.nom||'').localeCompare(b.nom||''));
  return staff.map(p=> ({
    Nom: p.nom||'',
    Grade: p.grade||'',
    Matiere: p.matiere||'',
    Statut: p.statut||'',
    Classes: (p.classes||[]).join(' | '),
    Disciplines: (p.disciplines||[]).join(' | '),
    Observations: p.obs||''
  }));
}
// --- Export CSV du personnel (min.)
function exportStaffCSV(){
  const staff = (SETTINGS_CACHE?.staff || []).slice();
  const rows = [["Nom","Grade","Mati√®re","Statut","Classes tenues","Disciplines","Obs."]];
  staff.forEach(p=>{
    rows.push([
      p.nom||"", p.grade||"", p.matiere||"", p.statut||"",
      (p.classes||[]).join(", "), (p.disciplines||[]).join(", "), (p.obs||"")
    ]);
  });
  const csv = rows.map(r=>r.map(x=>{
    const s=String(x??""); return /[",;\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s;
  }).join(";")).join("\n");
  const blob=new Blob([csv],{type:"text/csv;charset=utf-8"}), url=URL.createObjectURL(blob);
  const a=document.createElement("a"); a.href=url; a.download="personnel.csv"; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
}

// --- Impression liste du personnel (min.)
function printStaff(){
  const staff = (SETTINGS_CACHE?.staff || []).slice();
  const w = window.open("", "_blank");
  w.document.write(`<html><head><title>Personnel</title>
  <style>body{font-family:Arial} table{border-collapse:collapse;width:100%} th,td{border:1px solid #cfd4da;padding:6px;font-size:12px;text-align:left}</style>
  </head><body><h1>Personnel enseignant</h1><table><thead><tr>
  <th>Nom</th><th>Grade</th><th>Mati√®re</th><th>Statut</th><th>Classes</th><th>Disciplines</th><th>Obs.</th></tr></thead><tbody>`);
  staff.forEach(p=>{
    w.document.write(`<tr><td>${(p.nom||'').replace(/</g,"&lt;")}</td><td>${(p.grade||'').replace(/</g,"&lt;")}</td>
    <td>${(p.matiere||'').replace(/</g,"&lt;")}</td><td>${(p.statut||'').replace(/</g,"&lt;")}</td>
    <td>${(p.classes||[]).map(c=>c.replace(/</g,"&lt;")).join(", ")}</td>
    <td>${(p.disciplines||[]).map(d=>d.replace(/</g,"&lt;")).join(", ")}</td>
    <td>${(p.obs||'').replace(/</g,"&lt;")}</td></tr>`);
  });
  w.document.write(`</tbody></table></body></html>`); w.document.close(); w.focus(); w.print();
}

// --- √âdition "Fiche enseignant" (min. : charge/sauve les champs texte)
function openStaffSheet(data={}, onSave=()=>{}){
  const modal = document.getElementById('staffSheetModal');
  const $ = id => document.getElementById(id);
  $('#ssNom').value    = data.nom||"";
  $('#ssGrade').value  = data.grade||"";
  $('#ssMatiere').value= data.matiere||"";
  $('#ssStatut').value = data.statut||"";
  $('#ssObs').value    = data.obs||"";

  // (facultatif) rendez interactifs ssClasses / ssDisciplines si vous avez des chips √† g√©rer

  const onCancel = ()=> closeModal(modal);
  const onSaveClick = ()=>{
    const updated = {
      ...data,
      nom: $('#ssNom').value.trim(),
      grade: $('#ssGrade').value.trim(),
      matiere: $('#ssMatiere').value.trim(),
      statut: $('#ssStatut').value.trim(),
      obs: $('#ssObs').value.trim()
      // + classes / disciplines si vous les √©ditez ici
    };
    onSave(updated);
    closeModal(modal);
  };
  $('#btnStaffSheetCancel')?.addEventListener('click', onCancel, {once:true});
  $('#btnStaffSheetSave')?.addEventListener('click', onSaveClick, {once:true});
  openModal(modal);
}

function printStaff(){
  const rows = staffRowsForExport();
  if(!rows.length) return alert('Aucun enseignant.');
  const w = window.open('', '_blank');
  const title = `Personnel enseignant ‚Äî ${CONNECTED_USER.etab} ‚Äî ${getSchoolYear()} ‚Äî ${CONNECTED_USER.inspection.toUpperCase()}`;
  const style = `<style>*{box-sizing:border-box;font-family:Arial,Helvetica,sans-serif} h1{margin:0 0 6px;font-size:18px} .muted{color:#6b7280;font-size:12px;margin-bottom:6px} table{width:100%;border-collapse:collapse;font-size:12px;margin:8px 0} th,td{border:1px solid #cfd4da;padding:6px;text-align:left} th{background:#eef1f4}</style>`;
  w.document.write(`<html><head><title>${title}</title>${style}</head><body>`);
  w.document.write(`<h1>${title}</h1>`);
  w.document.write(`<div class="muted">${new Date().toLocaleString()}</div>`);
  w.document.write('<table><thead><tr><th>Nom</th><th>Grade</th><th>Mati√®re</th><th>Statut</th><th>Classes tenues</th><th>Disciplines</th><th>Observations</th></tr></thead><tbody>');
  rows.forEach(r=>{
    w.document.write(`<tr><td>${r.Nom||''}</td><td>${r.Grade||''}</td><td>${r.Matiere||''}</td><td>${r.Statut||''}</td><td>${r.Classes||''}</td><td>${r.Disciplines||''}</td><td>${r.Observations||''}</td></tr>`);
  });
  w.document.write('</tbody></table></body></html>');
  w.document.close(); w.focus(); w.print();
}
function printCollecte(){ window.print(); }

function updateSummary(){
  const n = document.querySelectorAll('.classeBloc').length;
  sumSpec.textContent = selSpec.value || '‚Äî';
  sumEval.textContent = document.getElementById('evaluation').value || '‚Äî';
  sumClasses.textContent = n;
  badgeClasses.textContent = `${n} classe${n>1?'s':''}`;
  badgeClasses.classList.toggle('hidden', n===0);
}

function openStaffExplorer(){ openModal(document.getElementById('staffExplorerModal')); }
function openStaffSheet(data={}, onSave=()=>{}){ openModal(document.getElementById('staffSheetModal')); /* hydrate si besoin */ }
function exportStaffCSV(){ alert('TODO: export CSV du personnel'); }
function printStaff(){ window.print(); }

</script>
<script>
// ---- Compat: CSS.escape shim (anciens navigateurs)
(function(){
  if (!window.CSS) window.CSS = {};
  if (!CSS.escape) {
    CSS.escape = function (s) {
      return String(s).replace(/[^a-zA-Z0-9_\-]/g, '\\$&');
    };
  }
})();

// ---- R√©sum√© (badge, cartes)
function updateSummary(){
  sumSpec.textContent   = selSpec.value || '‚Äî';
  const ev = document.getElementById('evaluation')?.value || '';
  sumEval.textContent   = ev ? `√âvaluation ${ev}` : '‚Äî';
  const n = document.querySelectorAll('.classeBloc').length;
  sumClasses.textContent= String(n);
  badgeClasses.textContent = `${n} classe${n>1?'s':''}`;
  badgeClasses.classList.toggle('hidden', n===0);
}

async function fillMainSpecsForCycle(cycle){
  selSpec.innerHTML = '<option value="">-- Choisir --</option>';
  if(!cycle){ return; }
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cycle)}&actif=true`);
    const specs = [...new Set((rows||[]).map(r=>r.specialite))].sort();
    specs.forEach(s=> selSpec.insertAdjacentHTML('beforeend', `<option value="${s}">${s}</option>`));
  }catch(_){}
}

selCycle.addEventListener('change', async ()=>{
  contSpec.classList.toggle('hidden', !selCycle.value);
  contEval.classList.add('hidden');
  formulaires.innerHTML='';
  await fillMainSpecsForCycle(selCycle.value);
  updateSummary();
});

selSpec.addEventListener('change', async ()=>{
  contEval.classList.toggle('hidden', !selSpec.value);
  if(selCycle.value && selSpec.value){
    await buildCollecteFor(selCycle.value, selSpec.value);
  }
});

document.getElementById('evaluation')?.addEventListener('change', updateSummary);

// Bouton ‚ÄúPr√©remplir‚Äù ‚Äì √† d√©faut de l‚Äôhistorique, on applique les plafonds/eff.
btnPrefill.addEventListener('click', ()=> applyEffectifCapsAndPrefill());


// ---- Impression collecte (simple)
function printCollecte(){ window.print(); }

function exportStaffCSV(){
  const rows = [...document.querySelectorAll('#staffTbody tr')].map(tr=>{
    const t=tr.querySelectorAll('td input, td textarea');
    return [t[0].value,t[1].value,t[2].value,t[3].value,t[4].value];
  }).filter(r=>r[0]);
  const csv = ['Nom;Grade;Mati√®re;Statut;Obs', ...rows.map(r=>r.map(x=>String(x||'').replace(/"/g,'""')).join(';'))].join('\n');
  const url = URL.createObjectURL(new Blob([csv],{type:'text/csv;charset=utf-8;'}));
  const a = document.createElement('a'); a.href=url; a.download='personnel.csv'; a.click(); URL.revokeObjectURL(url);
}

function printStaff(){ window.print(); }

function openStaffExplorer(){
  const m = document.getElementById('staffExplorerModal');
  if(m) openModal(m);
  // (Optionnel) remplir #staffExplorerTbody ici si besoin
}


// ---- Explorateur personnel ‚Äî stubs s√ªrs (√©vite les ReferenceError)
function openStaffExplorer(){
  const m = document.getElementById('staffExplorerModal');
  const tbody = document.getElementById('staffExplorerTbody');
  tbody.innerHTML = '';
  const staff = (SETTINGS_CACHE && SETTINGS_CACHE.staff) || [];
  staff.forEach(p=>{
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${(p.nom||'').replace(/[&<>]/g, s=>({ '&':'&amp;','<':'&lt;','>':'&gt;' }[s]))}</td>
      <td>${(p.grade||'').replace(/[&<>]/g, s=>({ '&':'&amp;','<':'&lt;','>':'&gt;' }[s]))}</td>
      <td>${(p.matiere||'').replace(/[&<>]/g, s=>({ '&':'&amp;','<':'&lt;','>':'&gt;' }[s]))}</td>
      <td>${(p.statut||'').replace(/[&<>]/g, s=>({ '&':'&amp;','<':'&lt;','>':'&gt;' }[s]))}</td>
      <td>${(p.classes||[]).join(', ')}</td>
      <td>${(p.disciplines||[]).join(', ')}</td>
      <td>${(p.obs||'').replace(/[&<>]/g, s=>({ '&':'&amp;','<':'&lt;','>':'&gt;' }[s]))}</td>
      <td><button class="btn" type="button">üìÑ</button></td>`;
    tr.querySelector('button')?.addEventListener('click', ()=> openStaffSheet(p));
    tbody.appendChild(tr);
  });
  openModal(m);
}
function exportStaffCSV(){
  const staff = (SETTINGS_CACHE && SETTINGS_CACHE.staff) || [];
  const rows = [['Nom','Grade','Mati√®re','Statut','Obs.','Classes tenues','Disciplines enseign√©es']];
  staff.forEach(p=>{
    rows.push([
      p.nom||'', p.grade||'', p.matiere||'', p.statut||'', (p.obs||'').replace(/\n/g,' '),
      (p.classes||[]).join(', '), (p.disciplines||[]).join(', ')
    ]);
  });
  const csv = rows.map(r=>r.map(x=>{
    const s=String(x??''); return /[",;\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s;
  }).join(';')).join('\n');
  const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = 'personnel.csv';
  document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
}
function printStaff(){ window.print(); }

function openStaffSheet(person = {}, onSave){
  const m = document.getElementById('staffSheetModal');
  const byId = id => document.getElementById(id);
  byId('ssNom').value = person.nom||'';
  byId('ssGrade').value = person.grade||'';
  byId('ssMatiere').value = person.matiere||'';
  byId('ssStatut').value = person.statut||'';
  byId('ssObs').value = person.obs||'';
  const clsBox = byId('ssClasses'); const disBox = byId('ssDisciplines');
  clsBox.innerHTML = ''; disBox.innerHTML = '';
  (person.classes||[]).forEach(c=>{
    const span=document.createElement('span'); span.className='pill'; span.textContent=c; clsBox.appendChild(span);
  });
  (person.disciplines||[]).forEach(d=>{
    const span=document.createElement('span'); span.className='pill'; span.textContent=d; disBox.appendChild(span);
  });
  // boutons
  byId('btnStaffSheetSave').onclick = ()=>{
    const out = {
      nom: byId('ssNom').value.trim(),
      grade: byId('ssGrade').value.trim(),
      matiere: byId('ssMatiere').value.trim(),
      statut: byId('ssStatut').value.trim(),
      obs: byId('ssObs').value.trim(),
      classes: person.classes||[],
      disciplines: person.disciplines||[]
    };
    // sync dans SETTINGS_CACHE si possible
    if(SETTINGS_CACHE){
      const list = SETTINGS_CACHE.staff = SETTINGS_CACHE.staff || [];
      const i = list.findIndex(p=> (p.nom||'').trim().toLowerCase() === out.nom.toLowerCase());
      if(i>=0) list[i] = {...list[i], ...out}; else list.push(out);
    }
    if(typeof onSave==='function') onSave(out);
    closeModal(m);
  };
  byId('btnStaffSheetCancel').onclick = ()=> closeModal(m);
  byId('btnCloseStaffSheet').onclick = ()=> closeModal(m);
  openModal(m);
}

// ---- Sidebar stats (remplace la version tronqu√©e)
async function refreshSettingsSidebar(){
  const y = getSchoolYear();
  yearStat.textContent = y;
  try{
    const r = await fetch(`/api/settings?annee=${encodeURIComponent(y)}`, {credentials:'same-origin'});
    if(!r.ok){ SETTINGS_CACHE=null; effStaffStat.textContent='Aucun param√©trage trouv√©.'; effStaffDetails.classList.add('hidden'); return; }
    SETTINGS_CACHE = await r.json();
    const eff = SETTINGS_CACHE.effectifs||[];
    const staff = SETTINGS_CACHE.staff||[];
    const totEleves = eff.reduce((s,e)=> s + (+e.filles||0) + (+e.garcons||0), 0);
    const nbDiv = eff.length;
    const nbEns = staff.length;

    effStaffStat.innerHTML = `${nbDiv} division${nbDiv>1?'s':''}, ${totEleves} √©l√®ve${totEleves>1?'s':''} ‚Ä¢ ${nbEns} enseignant${nbEns>1?'s':''}`;
    // mini-tableau des classes
    const wrap = document.createElement('div');
    wrap.innerHTML = `
      <table class="tbl-mini" style="margin-top:6px">
        <thead><tr><th style="text-align:left">Classe</th><th>Div.</th><th>F</th><th>G</th></tr></thead>
        <tbody>${eff.map(e=>{
          const m = String(e.classe||'').match(/\((\d+)\)\s*$/);
          const div = m ? +m[1] : 1;
          return `<tr><td style="text-align:left">${(e.classe||'').replace(/\s*\(\d+\)\s*$/,'')}</td><td>${div}</td><td>${+e.filles||0}</td><td>${+e.garcons||0}</td></tr>`;
        }).join('')}</tbody>
      </table>`;
    effTableWrap.innerHTML = '';
    effTableWrap.appendChild(wrap);
    effStaffDetails.classList.remove('hidden');
  }catch(_){
    effStaffStat.textContent='Aucun param√©trage trouv√©.';
    effStaffDetails.classList.add('hidden');
  }
}

// ---- Au chargement, s‚Äôassurer que le r√©sum√© est coh√©rent
updateSummary();
refreshSettingsSidebar();
</script>

</body>
</html>

